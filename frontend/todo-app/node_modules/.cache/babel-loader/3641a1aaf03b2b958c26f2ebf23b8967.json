{"ast":null,"code":"import _classCallCheck from \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\src\\\\components\\\\todo\\\\CourseUpdateComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport CourseDataService from '../../api/todo/CourseDataService.js';\nimport AuthenticationService from './AuthenticationService.js';\n\nvar CourseUpdateComponent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CourseUpdateComponent, _Component);\n\n  function CourseUpdateComponent(props) {\n    var _this;\n\n    _classCallCheck(this, CourseUpdateComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CourseUpdateComponent).call(this, props));\n    _this.state = {\n      id: _this.props.match.params.id,\n      courseId: '',\n      coursename: '',\n      completed: '',\n      grade: ''\n    };\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.validate = _this.validate.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(CourseUpdateComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var username = AuthenticationService.getLoggedInUserName();\n      CourseDataService.retrieveCourse(username, this.state.id).then(function (response) {\n        return _this2.setState({\n          courseId: response.data.courseId,\n          coursename: response.data.coursename,\n          completed: response.data.completed,\n          grade: response.data.grade\n        });\n      });\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(values) {\n      var errors = {};\n\n      if (!values.courseId) {\n        errors.courseId = 'Enter a course ID';\n      }\n\n      if (!values.coursename) {\n        errors.coursename = 'Enter a course name';\n      }\n\n      if (values.completed != 'false' && values.completed != 'true') {\n        errors.completed = 'Please select a status for is completed';\n      }\n\n      if (values.completed == 'false' && values.grade > 0) {\n        errors.grade = 'Please change is completed status to true';\n      }\n\n      return errors;\n    }\n  }, {\n    key: \"getRadioVal\",\n    value: function getRadioVal(form, name) {\n      var val; // get list of radio buttons with specified name\n\n      var radios = form.elements[name]; // loop through list of radio buttons\n\n      for (var i = 0, len = radios.length; i < len; i++) {\n        if (radios[i].checked) {\n          // radio checked?\n          val = radios[i].value; // if it is, hold its value in val\n\n          break; // and break out of for loop\n        }\n      }\n\n      return val; // return value of checked radio or undefined if none checked\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(values) {\n      var _this3 = this;\n\n      var val = this.getRadioVal(document.getElementById('updatecourse'), 'completed');\n      var username = AuthenticationService.getLoggedInUserName();\n      var course = {\n        id: this.state.id,\n        courseId: values.courseId,\n        coursename: values.coursename,\n        completed: val,\n        grade: values.grade\n      };\n\n      if (this.state.id === -1) {\n        CourseDataService.createCourse(username, course).then(function () {\n          return _this3.props.history.push('/courses');\n        });\n      } else {\n        CourseDataService.updateCourse(username, this.state.id, course).then(function () {\n          return _this3.props.history.push('/courses');\n        });\n      }\n\n      console.log(values);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          courseId = _this$state.courseId,\n          coursename = _this$state.coursename,\n          completed = _this$state.completed,\n          grade = _this$state.grade; //let targetDate = this.state.targetDate\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Add Course\"), React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(Formik, {\n        initialValues: {\n          courseId: courseId,\n          coursename: coursename,\n          completed: completed,\n          grade: grade\n        },\n        onSubmit: this.onSubmit,\n        validateOnChange: false,\n        validateOnBlur: false,\n        validate: this.validate,\n        enableReinitialize: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, function (props) {\n        return React.createElement(Form, {\n          class: \"updatecourse\",\n          id: \"updatecourse\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, React.createElement(ErrorMessage, {\n          name: \"courseId\",\n          component: \"div\",\n          className: \"alert alert-warning\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }), React.createElement(ErrorMessage, {\n          name: \"coursename\",\n          component: \"div\",\n          className: \"alert alert-warning\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }), React.createElement(ErrorMessage, {\n          name: \"completed\",\n          component: \"div\",\n          className: \"alert alert-warning\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }), React.createElement(ErrorMessage, {\n          name: \"grade\",\n          component: \"div\",\n          className: \"alert alert-warning\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }), React.createElement(\"fieldset\", {\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, \"Course ID\"), React.createElement(Field, {\n          className: \"form-control\",\n          type: \"text\",\n          name: \"courseId\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        })), React.createElement(\"fieldset\", {\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, \"Course Name\"), React.createElement(Field, {\n          className: \"form-control\",\n          type: \"text\",\n          name: \"coursename\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        })), React.createElement(\"fieldset\", {\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, \"Is Completed\"), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }), React.createElement(Field, {\n          type: \"radio\",\n          name: \"completed\",\n          value: \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }), \" True \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }), React.createElement(Field, {\n          type: \"radio\",\n          name: \"completed\",\n          value: \"false\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }), \" False\"), React.createElement(\"fieldset\", {\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, \"Grade\"), React.createElement(Field, {\n          className: \"form-control\",\n          type: \"number\",\n          name: \"grade\",\n          min: \"0\",\n          max: \"100\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        })), React.createElement(\"button\", {\n          className: \"btn btn-success\",\n          type: \"submit\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, \"Save\"));\n      })));\n    }\n  }]);\n\n  return CourseUpdateComponent;\n}(Component);\n\nexport default CourseUpdateComponent;","map":{"version":3,"sources":["E:\\Bachelor of Computer Science\\3rd Semester\\Software Engineering - Process & Tools\\SEPTOne\\frontend\\todo-app\\src\\components\\todo\\CourseUpdateComponent.jsx"],"names":["React","Component","Formik","Form","Field","ErrorMessage","CourseDataService","AuthenticationService","CourseUpdateComponent","props","state","id","match","params","courseId","coursename","completed","grade","onSubmit","bind","validate","username","getLoggedInUserName","retrieveCourse","then","response","setState","data","values","errors","form","name","val","radios","elements","i","len","length","checked","value","getRadioVal","document","getElementById","course","createCourse","history","push","updateCourse","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CourseDataService from '../../api/todo/CourseDataService.js'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\nclass CourseUpdateComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            courseId: '',\r\n            coursename: '',\r\n            completed: '',\r\n            grade: ''\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n\r\n        CourseDataService.retrieveCourse(username, this.state.id)\r\n            .then(response => this.setState({\r\n                courseId: response.data.courseId,\r\n                coursename: response.data.coursename,\r\n                completed: response.data.completed,\r\n                grade: response.data.grade\r\n            }))\r\n    }\r\n\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.courseId) {\r\n            errors.courseId = 'Enter a course ID'\r\n        } \r\n\r\n        if (!values.coursename) {\r\n            errors.coursename = 'Enter a course name'\r\n        }\r\n\r\n        if(values.completed!='false' && values.completed!='true'){\r\n            errors.completed = 'Please select a status for is completed'\r\n        }\r\n\r\n        if(values.completed=='false' && values.grade>0){\r\n            errors.grade = 'Please change is completed status to true'\r\n        }\r\n\r\n        return errors\r\n\r\n    }\r\n\r\n    getRadioVal(form, name) {\r\n        var val;\r\n        // get list of radio buttons with specified name\r\n        var radios = form.elements[name];\r\n        \r\n        // loop through list of radio buttons\r\n        for (var i=0, len=radios.length; i<len; i++) {\r\n            if ( radios[i].checked ) { // radio checked?\r\n                val = radios[i].value; // if it is, hold its value in val\r\n                break; // and break out of for loop\r\n            }\r\n        }\r\n        return val; // return value of checked radio or undefined if none checked\r\n    }\r\n\r\n    onSubmit(values) {\r\n        var val = this.getRadioVal(document.getElementById('updatecourse'), 'completed')\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        let course = {\r\n            id: this.state.id,\r\n            courseId: values.courseId,\r\n            coursename: values.coursename,\r\n            completed: val,\r\n            grade: values.grade\r\n        }\r\n\r\n        if (this.state.id === -1) {\r\n            CourseDataService.createCourse(username, course)\r\n                .then(() => this.props.history.push('/courses'))\r\n        } else {\r\n            CourseDataService.updateCourse(username, this.state.id, course)\r\n                .then(() => this.props.history.push('/courses'))\r\n        }\r\n\r\n        console.log(values);\r\n    }\r\n\r\n    render() {\r\n\r\n        let { courseId, coursename, completed, grade} = this.state\r\n        //let targetDate = this.state.targetDate\r\n\r\n        return (\r\n            <div>\r\n                <h1>Add Course</h1>\r\n                <div className=\"container\">\r\n                    <Formik\r\n                        initialValues={{ courseId, coursename, completed, grade}}\r\n                        onSubmit={this.onSubmit}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                            (props) => (\r\n                                <Form class='updatecourse' id='updatecourse'>\r\n                                    <ErrorMessage name=\"courseId\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <ErrorMessage name=\"coursename\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <ErrorMessage name=\"completed\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <ErrorMessage name=\"grade\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Course ID</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"courseId\" />\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Course Name</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"coursename\" />\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Is Completed</label><br/>\r\n                                        <Field type=\"radio\" name=\"completed\" value=\"true\"/> True <br/> \r\n                                        <Field type=\"radio\" name=\"completed\" value=\"false\"/> False\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Grade</label>\r\n                                        <Field className=\"form-control\" type=\"number\" name=\"grade\" min=\"0\" max=\"100\"/>\r\n                                    </fieldset>\r\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CourseUpdateComponent"]},"metadata":{},"sourceType":"module"}