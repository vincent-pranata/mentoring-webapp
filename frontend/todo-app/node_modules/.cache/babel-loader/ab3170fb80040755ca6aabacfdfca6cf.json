{"ast":null,"code":"import _classCallCheck from \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\src\\\\components\\\\todo\\\\CourseComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport CourseDataService from '../../api/todo/CourseDataService.js';\nimport AuthenticationService from './AuthenticationService.js';\n\nvar CourseComponent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CourseComponent, _Component);\n\n  function CourseComponent(props) {\n    var _this;\n\n    _classCallCheck(this, CourseComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CourseComponent).call(this, props));\n\n    _this.onBlur = function (event) {\n      _this.setState({\n        courseId: event.target.value\n      });\n    };\n\n    _this.state = {\n      id: _this.props.match.params.id,\n      courseId: '',\n      coursename: '',\n      courseExist: false\n    };\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.validate = _this.validate.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(CourseComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.state.id === -1) {\n        return;\n      }\n\n      var username = AuthenticationService.getLoggedInUserName();\n      CourseDataService.retrieveCourse(username, this.state.id).then(function (response) {\n        return _this2.setState({\n          courseId: response.data.courseId,\n          coursename: response.data.coursename\n        });\n      });\n    }\n  }, {\n    key: \"setValidationValues\",\n    value: function setValidationValues() {\n      var _this3 = this;\n\n      var username = AuthenticationService.getLoggedInUserName();\n      CourseDataService.checkCourse(username, this.state.courseId).then(function (response) {\n        return _this3.setState({\n          courseExist: response.data\n        });\n      });\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(values) {\n      var errors = {};\n\n      if (!values.courseId) {\n        errors.courseId = 'Enter a course ID';\n      }\n\n      if (!values.coursename) {\n        errors.coursename = 'Enter a course name';\n      }\n\n      if (this.state.courseExist == true) {\n        errors.courseId = 'Course ID already existed! Please try again';\n      }\n\n      return errors;\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(values) {\n      var _this4 = this;\n\n      var username = AuthenticationService.getLoggedInUserName();\n      var course = {\n        id: this.state.id,\n        courseId: values.courseId,\n        coursename: values.coursename\n      };\n\n      if (this.state.id === -1) {\n        CourseDataService.createCourse(username, course).then(function () {\n          return _this4.props.history.push('/courses');\n        });\n      } else {\n        CourseDataService.updateCourse(username, this.state.id, course).then(function () {\n          return _this4.props.history.push('/courses');\n        });\n      }\n\n      console.log(values);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var _this$state = this.state,\n          courseId = _this$state.courseId,\n          coursename = _this$state.coursename; //let targetDate = this.state.targetDate\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Add Course\"), React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(Formik, {\n        initialValues: {\n          courseId: courseId,\n          coursename: coursename\n        },\n        onSubmit: this.onSubmit,\n        validateOnChange: false,\n        validateOnBlur: false,\n        validate: this.validate,\n        enableReinitialize: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, function (props) {\n        return React.createElement(Form, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, React.createElement(ErrorMessage, {\n          name: \"courseId\",\n          component: \"div\",\n          className: \"alert alert-warning\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }), React.createElement(ErrorMessage, {\n          name: \"coursename\",\n          component: \"div\",\n          className: \"alert alert-warning\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }), React.createElement(\"fieldset\", {\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, \"Course ID\"), React.createElement(Field, {\n          className: \"form-control\",\n          type: \"text\",\n          name: \"courseId\",\n          onBlur: _this5.onBlur.bind(_this5),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        })), React.createElement(\"fieldset\", {\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, \"Course Name\"), React.createElement(Field, {\n          className: \"form-control\",\n          type: \"text\",\n          name: \"coursename\",\n          onBlur: _this5.setValidationValues.bind(_this5),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        })), React.createElement(\"button\", {\n          className: \"btn btn-success\",\n          type: \"submit\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, \"Save\"));\n      })));\n    }\n  }]);\n\n  return CourseComponent;\n}(Component);\n\nexport default CourseComponent;","map":{"version":3,"sources":["E:\\Bachelor of Computer Science\\3rd Semester\\Software Engineering - Process & Tools\\SEPTOne\\frontend\\todo-app\\src\\components\\todo\\CourseComponent.jsx"],"names":["React","Component","Formik","Form","Field","ErrorMessage","CourseDataService","AuthenticationService","CourseComponent","props","onBlur","event","setState","courseId","target","value","state","id","match","params","coursename","courseExist","onSubmit","bind","validate","username","getLoggedInUserName","retrieveCourse","then","response","data","checkCourse","values","errors","course","createCourse","history","push","updateCourse","console","log","setValidationValues"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport CourseDataService from '../../api/todo/CourseDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass CourseComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: this.props.match.params.id,\n            courseId: '',\n            coursename: '',\n            courseExist:false\n        }\n\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n\n    }\n\n    componentDidMount() {\n\n        if (this.state.id === -1) {\n            return\n        }\n\n        let username = AuthenticationService.getLoggedInUserName()\n\n        CourseDataService.retrieveCourse(username, this.state.id)\n            .then(response => this.setState({\n                courseId: response.data.courseId,\n                coursename: response.data.coursename\n            }))\n    }\n\n    setValidationValues() {\n        let username = AuthenticationService.getLoggedInUserName()\n\n        CourseDataService.checkCourse(username, this.state.courseId)\n        .then(response => this.setState({courseExist: response.data})\n            )\n    }\n\n    validate(values) {\n        let errors = {}\n        if (!values.courseId) {\n            errors.courseId = 'Enter a course ID'\n        }\n\n        if (!values.coursename) {\n            errors.coursename = 'Enter a course name'\n        }\n\n        if (this.state.courseExist==true) {\n            errors.courseId = 'Course ID already existed! Please try again'\n        } \n\n        return errors\n\n    }\n\n    onSubmit(values) {\n        let username = AuthenticationService.getLoggedInUserName()\n\n        let course = {\n            id: this.state.id,\n            courseId: values.courseId,\n            coursename: values.coursename\n        }\n\n        if (this.state.id === -1) {\n            CourseDataService.createCourse(username, course)\n                .then(() => this.props.history.push('/courses'))\n        } else {\n            CourseDataService.updateCourse(username, this.state.id, course)\n                .then(() => this.props.history.push('/courses'))\n        }\n\n        console.log(values);\n    }\n\n    onBlur = (event) => {\n        this.setState({courseId: event.target.value});\n    }\n\n    render() {\n\n        let { courseId, coursename } = this.state\n        //let targetDate = this.state.targetDate\n\n        return (\n            <div>\n                <h1>Add Course</h1>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{ courseId, coursename }}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name=\"courseId\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"coursename\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <fieldset className=\"form-group\">\n                                        <label>Course ID</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"courseId\" onBlur={this.onBlur.bind(this)}/>\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Course Name</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"coursename\" onBlur={this.setValidationValues.bind(this)}/>\n                                    </fieldset>\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CourseComponent"]},"metadata":{},"sourceType":"module"}