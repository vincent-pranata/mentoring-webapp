{"ast":null,"code":"import _classCallCheck from \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport axios from 'axios';\nimport { API_URL } from '../../Constants';\nexport var USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nvar AuthenticationService =\n/*#__PURE__*/\nfunction () {\n  function AuthenticationService() {\n    _classCallCheck(this, AuthenticationService);\n\n    this.state = {\n      username: '',\n      email: ''\n    };\n    this.responseGoogle = this.responseGoogle.bind(this);\n  } // executeBasicAuthenticationService(username) {\n  //     return axios.get(`${API_URL}/basicauth`,\n  //         { headers: { authorization: this.createBasicAuthToken(username) } })\n  // }\n  // executeJwtAuthenticationService(username) {\n  //     return axios.post(`${API_URL}/authenticate`, {\n  //         username\n  //     })\n  // }\n  // createBasicAuthToken(username) {\n  //     return 'Basic ' + window.btoa(username)\n  // }\n  // registerSuccessfulLogin(username) {\n  //     sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n  //     this.setupAxiosInterceptors(this.createBasicAuthToken(username))\n  // }\n\n\n  _createClass(AuthenticationService, [{\n    key: \"registerSuccessfulLogin\",\n    value: function registerSuccessfulLogin(username, email) {\n      this.state.username = username;\n      this.state.username = email;\n    }\n  }, {\n    key: \"isUserLoggedIn\",\n    value: function isUserLoggedIn() {\n      if (this.state.username === '') {\n        return false;\n      }\n\n      return true;\n    } // registerSuccessfulLoginForJwt(username, token) {\n    //     sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n    //     this.setupAxiosInterceptors(this.createJWTToken(token))\n    // }\n    // createJWTToken(token) {\n    //     return 'Bearer ' + token\n    // }\n    // logout() {\n    //     sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    // }\n    // isUserLoggedIn() {\n    //     let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n    //     if (user === null) return false\n    //     return true\n    // }\n    // getLoggedInUserName() {\n    //     let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n    //     if (user === null) return ''\n    //     return user\n    // }\n    // setupAxiosInterceptors(token) {\n    //     axios.interceptors.request.use(\n    //         (config) => {\n    //             if (this.isUserLoggedIn()) {\n    //                 config.headers.authorization = token\n    //             }\n    //             return config\n    //         }\n    //     )\n    // }\n\n  }]);\n\n  return AuthenticationService;\n}();\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["E:\\Bachelor of Computer Science\\3rd Semester\\Software Engineering - Process & Tools\\SEPTOne\\frontend\\todo-app\\src\\components\\todo\\AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","state","username","email","responseGoogle","bind"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,OAAO,IAAMC,gCAAgC,GAAG,mBAAzC;;IAEDC,qB;;;AAEF,mCAAc;AAAA;;AACV,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAC,EADA;AAETC,MAAAA,KAAK,EAAC;AAFG,KAAb;AAIA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;AACH,G,CACD;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;4CAEwBH,Q,EAASC,K,EAAO;AACpC,WAAKF,KAAL,CAAWC,QAAX,GAAoBA,QAApB;AACA,WAAKD,KAAL,CAAWC,QAAX,GAAoBC,KAApB;AACH;;;qCAEgB;AACb,UAAI,KAAKF,KAAL,CAAWC,QAAX,KAAwB,EAA5B,EAA+B;AAC3B,eAAO,KAAP;AACH;;AACD,aAAO,IAAP;AACH,K,CAED;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAGJ,eAAe,IAAIF,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\nimport { API_URL } from '../../Constants'\r\n\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\r\n\r\nclass AuthenticationService {\r\n\r\n    constructor() {\r\n        this.state = {\r\n            username:'',\r\n            email:''\r\n        }\r\n        this.responseGoogle = this.responseGoogle.bind(this)\r\n    }\r\n    // executeBasicAuthenticationService(username) {\r\n    //     return axios.get(`${API_URL}/basicauth`,\r\n    //         { headers: { authorization: this.createBasicAuthToken(username) } })\r\n    // }\r\n\r\n    // executeJwtAuthenticationService(username) {\r\n    //     return axios.post(`${API_URL}/authenticate`, {\r\n    //         username\r\n    //     })\r\n    // }\r\n\r\n    // createBasicAuthToken(username) {\r\n    //     return 'Basic ' + window.btoa(username)\r\n    // }\r\n\r\n    // registerSuccessfulLogin(username) {\r\n    //     sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n    //     this.setupAxiosInterceptors(this.createBasicAuthToken(username))\r\n    // }\r\n\r\n    registerSuccessfulLogin(username,email) {\r\n        this.state.username=username;\r\n        this.state.username=email;\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        if (this.state.username === ''){\r\n            return false\r\n        } \r\n        return true\r\n    }\r\n\r\n    // registerSuccessfulLoginForJwt(username, token) {\r\n    //     sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n    //     this.setupAxiosInterceptors(this.createJWTToken(token))\r\n    // }\r\n\r\n    // createJWTToken(token) {\r\n    //     return 'Bearer ' + token\r\n    // }\r\n\r\n\r\n    // logout() {\r\n    //     sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n    // }\r\n\r\n    // isUserLoggedIn() {\r\n    //     let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n    //     if (user === null) return false\r\n    //     return true\r\n    // }\r\n\r\n    // getLoggedInUserName() {\r\n    //     let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n    //     if (user === null) return ''\r\n    //     return user\r\n    // }\r\n\r\n    // setupAxiosInterceptors(token) {\r\n\r\n    //     axios.interceptors.request.use(\r\n    //         (config) => {\r\n    //             if (this.isUserLoggedIn()) {\r\n    //                 config.headers.authorization = token\r\n    //             }\r\n    //             return config\r\n    //         }\r\n    //     )\r\n    // }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}