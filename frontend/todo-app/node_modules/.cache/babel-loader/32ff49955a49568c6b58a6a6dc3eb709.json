{"ast":null,"code":"import _classCallCheck from \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport axios from 'axios';\nimport { JPA_API_URL } from '../../Constants';\n\nvar GroupService =\n/*#__PURE__*/\nfunction () {\n  function GroupService() {\n    _classCallCheck(this, GroupService);\n  }\n\n  _createClass(GroupService, [{\n    key: \"retrieveAllGroups\",\n    // get all groups from backend\n    value: function retrieveAllGroups(name) {\n      return axios.get(\"\".concat(JPA_API_URL, \"/users/\").concat(name, \"/groups\"));\n    } //get a group from backend\n\n  }, {\n    key: \"retrieveGroup\",\n    value: function retrieveGroup(name, id) {\n      return axios.get(\"\".concat(JPA_API_URL, \"/users/\").concat(name, \"/groups/\").concat(id));\n    } //delete a group for backend\n\n  }, {\n    key: \"deleteGroup\",\n    value: function deleteGroup(name, id) {\n      return axios.delete(\"\".concat(JPA_API_URL, \"/users/\").concat(name, \"/groups/\").concat(id));\n    } //update a group trom backend\n\n  }, {\n    key: \"updateGroup\",\n    value: function updateGroup(name, id, group) {\n      return axios.put(\"\".concat(JPA_API_URL, \"/users/\").concat(name, \"/groups/\").concat(id), group);\n    } //create a new group for backend\n\n  }, {\n    key: \"createGroup\",\n    value: function createGroup(name, group) {\n      return axios.post(\"\".concat(JPA_API_URL, \"/users/\").concat(name, \"/groups\"), group);\n    } //check if group is joined yet and get boolean \n\n  }, {\n    key: \"isJoined\",\n    value: function isJoined(name, id) {\n      return axios.get(\"\".concat(JPA_API_URL, \"/users/\").concat(name, \"/groups/\").concat(id, \"/isJoined\"));\n    } //get groups based on course id from backend\n\n  }, {\n    key: \"getActiveGroups\",\n    value: function getActiveGroups(courseId) {\n      return axios.get(\"\".concat(JPA_API_URL, \"/users/groups/\").concat(courseId, \"/getActiveGroups\"));\n    }\n  }]);\n\n  return GroupService;\n}();\n\nexport default new GroupService();","map":{"version":3,"sources":["E:\\Bachelor of Computer Science\\3rd Semester\\Software Engineering - Process & Tools\\SEPTOne\\frontend\\todo-app\\src\\api\\todo\\GroupService.js"],"names":["axios","JPA_API_URL","GroupService","name","get","id","delete","group","put","post","courseId"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,iBAA5B;;IAEMC,Y;;;;;;;;;AAEF;sCACkBC,I,EAAM;AACpB,aAAOH,KAAK,CAACI,GAAN,WAAaH,WAAb,oBAAkCE,IAAlC,aAAP;AACH,K,CAED;;;;kCACcA,I,EAAME,E,EAAI;AACpB,aAAOL,KAAK,CAACI,GAAN,WAAaH,WAAb,oBAAkCE,IAAlC,qBAAiDE,EAAjD,EAAP;AACH,K,CAED;;;;gCACYF,I,EAAME,E,EAAI;AAClB,aAAOL,KAAK,CAACM,MAAN,WAAgBL,WAAhB,oBAAqCE,IAArC,qBAAoDE,EAApD,EAAP;AACH,K,CAED;;;;gCACYF,I,EAAME,E,EAAIE,K,EAAO;AACzB,aAAOP,KAAK,CAACQ,GAAN,WAAaP,WAAb,oBAAkCE,IAAlC,qBAAiDE,EAAjD,GAAuDE,KAAvD,CAAP;AACH,K,CAED;;;;gCACYJ,I,EAAMI,K,EAAO;AACrB,aAAOP,KAAK,CAACS,IAAN,WAAcR,WAAd,oBAAmCE,IAAnC,cAAkDI,KAAlD,CAAP;AACH,K,CAED;;;;6BACSJ,I,EAAME,E,EAAI;AAClB,aAAOL,KAAK,CAACI,GAAN,WAAaH,WAAb,oBAAkCE,IAAlC,qBAAiDE,EAAjD,eAAP;AACH,K,CAEE;;;;oCACaK,Q,EAAS;AAClB,aAAOV,KAAK,CAACI,GAAN,WAAaH,WAAb,2BAAyCS,QAAzC,sBAAP;AACH;;;;;;AAGL,eAAe,IAAIR,YAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\nimport { JPA_API_URL } from '../../Constants'\r\n\r\nclass GroupService {\r\n\r\n    // get all groups from backend\r\n    retrieveAllGroups(name) {\r\n        return axios.get(`${JPA_API_URL}/users/${name}/groups`);\r\n    }\r\n\r\n    //get a group from backend\r\n    retrieveGroup(name, id) {\r\n        return axios.get(`${JPA_API_URL}/users/${name}/groups/${id}`);\r\n    }\r\n\r\n    //delete a group for backend\r\n    deleteGroup(name, id) {\r\n        return axios.delete(`${JPA_API_URL}/users/${name}/groups/${id}`);\r\n    }\r\n\r\n    //update a group trom backend\r\n    updateGroup(name, id, group) {\r\n        return axios.put(`${JPA_API_URL}/users/${name}/groups/${id}`, group);\r\n    }\r\n\r\n    //create a new group for backend\r\n    createGroup(name, group) {\r\n        return axios.post(`${JPA_API_URL}/users/${name}/groups`, group);\r\n    }\r\n\r\n    //check if group is joined yet and get boolean \r\n    isJoined(name, id) {\r\n\t    return axios.get(`${JPA_API_URL}/users/${name}/groups/${id}/isJoined`);\r\n\t}\r\n    \r\n    //get groups based on course id from backend\r\n\tgetActiveGroups(courseId){\r\n        return axios.get(`${JPA_API_URL}/users/groups/${courseId}/getActiveGroups`);\r\n    }\r\n}\r\n\r\nexport default new GroupService()"]},"metadata":{},"sourceType":"module"}