{"ast":null,"code":"import _classCallCheck from \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport axios from 'axios';\nimport { API_URL } from '../../Constants';\nexport var USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nvar AuthenticationService =\n/*#__PURE__*/\nfunction () {\n  function AuthenticationService() {\n    _classCallCheck(this, AuthenticationService);\n\n    this.state = {\n      username: '',\n      email: ''\n    };\n    this.responseGoogle = this.responseGoogle.bind(this);\n  }\n\n  _createClass(AuthenticationService, [{\n    key: \"executeBasicAuthenticationService\",\n    value: function executeBasicAuthenticationService(username) {\n      return axios.get(\"\".concat(API_URL, \"/basicauth\"), {\n        headers: {\n          authorization: this.createBasicAuthToken(username)\n        }\n      });\n    }\n  }, {\n    key: \"executeJwtAuthenticationService\",\n    value: function executeJwtAuthenticationService(username) {\n      return axios.post(\"\".concat(API_URL, \"/authenticate\"), {\n        username: username\n      });\n    }\n  }, {\n    key: \"createBasicAuthToken\",\n    value: function createBasicAuthToken(username) {\n      return 'Basic ' + window.btoa(username);\n    }\n  }, {\n    key: \"registerSuccessfulLogin\",\n    value: function registerSuccessfulLogin(username) {\n      sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n      this.setupAxiosInterceptors(this.createBasicAuthToken(username));\n    }\n  }, {\n    key: \"registerSuccessfulLoginForJwt\",\n    value: function registerSuccessfulLoginForJwt(username, token) {\n      sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n      this.setupAxiosInterceptors(this.createJWTToken(token));\n    }\n  }, {\n    key: \"createJWTToken\",\n    value: function createJWTToken(token) {\n      return 'Bearer ' + token;\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n  }, {\n    key: \"isUserLoggedIn\",\n    value: function isUserLoggedIn() {\n      var user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n      if (user === null) return false;\n      return true;\n    }\n  }, {\n    key: \"getLoggedInUserName\",\n    value: function getLoggedInUserName() {\n      var user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n      if (user === null) return '';\n      return user;\n    }\n  }, {\n    key: \"setupAxiosInterceptors\",\n    value: function setupAxiosInterceptors(token) {\n      var _this = this;\n\n      axios.interceptors.request.use(function (config) {\n        if (_this.isUserLoggedIn()) {\n          config.headers.authorization = token;\n        }\n\n        return config;\n      });\n    }\n  }]);\n\n  return AuthenticationService;\n}();\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["E:\\Bachelor of Computer Science\\3rd Semester\\Software Engineering - Process & Tools\\SEPTOne\\frontend\\todo-app\\src\\components\\todo\\AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","state","username","email","responseGoogle","bind","get","headers","authorization","createBasicAuthToken","post","window","btoa","sessionStorage","setItem","setupAxiosInterceptors","token","createJWTToken","removeItem","user","getItem","interceptors","request","use","config","isUserLoggedIn"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,OAAO,IAAMC,gCAAgC,GAAG,mBAAzC;;IAEDC,qB;;;AAEF,mCAAc;AAAA;;AACV,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAC,EADA;AAETC,MAAAA,KAAK,EAAC;AAFG,KAAb;AAIA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;AACH;;;;sDACiCH,Q,EAAU;AACxC,aAAOL,KAAK,CAACS,GAAN,WAAaR,OAAb,iBACH;AAAES,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BP,QAA1B;AAAjB;AAAX,OADG,CAAP;AAEH;;;oDAE+BA,Q,EAAU;AACtC,aAAOL,KAAK,CAACa,IAAN,WAAcZ,OAAd,oBAAsC;AACzCI,QAAAA,QAAQ,EAARA;AADyC,OAAtC,CAAP;AAGH;;;yCAEoBA,Q,EAAU;AAC3B,aAAO,WAAWS,MAAM,CAACC,IAAP,CAAYV,QAAZ,CAAlB;AACH;;;4CAEuBA,Q,EAAU;AAC9BW,MAAAA,cAAc,CAACC,OAAf,CAAuBf,gCAAvB,EAAyDG,QAAzD;AACA,WAAKa,sBAAL,CAA4B,KAAKN,oBAAL,CAA0BP,QAA1B,CAA5B;AACH;;;kDAE6BA,Q,EAAUc,K,EAAO;AAC3CH,MAAAA,cAAc,CAACC,OAAf,CAAuBf,gCAAvB,EAAyDG,QAAzD;AACA,WAAKa,sBAAL,CAA4B,KAAKE,cAAL,CAAoBD,KAApB,CAA5B;AACH;;;mCAEcA,K,EAAO;AAClB,aAAO,YAAYA,KAAnB;AACH;;;6BAGQ;AACLH,MAAAA,cAAc,CAACK,UAAf,CAA0BnB,gCAA1B;AACH;;;qCAEgB;AACb,UAAIoB,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuBrB,gCAAvB,CAAX;AACA,UAAIoB,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,aAAO,IAAP;AACH;;;0CAEqB;AAClB,UAAIA,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuBrB,gCAAvB,CAAX;AACA,UAAIoB,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,aAAOA,IAAP;AACH;;;2CAEsBH,K,EAAO;AAAA;;AAE1BnB,MAAAA,KAAK,CAACwB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACI,UAACC,MAAD,EAAY;AACR,YAAI,KAAI,CAACC,cAAL,EAAJ,EAA2B;AACvBD,UAAAA,MAAM,CAACjB,OAAP,CAAeC,aAAf,GAA+BQ,KAA/B;AACH;;AACD,eAAOQ,MAAP;AACH,OANL;AAQH;;;;;;AAGL,eAAe,IAAIxB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\nimport { API_URL } from '../../Constants'\r\n\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\r\n\r\nclass AuthenticationService {\r\n\r\n    constructor() {\r\n        this.state = {\r\n            username:'',\r\n            email:''\r\n        }\r\n        this.responseGoogle = this.responseGoogle.bind(this)\r\n    }\r\n    executeBasicAuthenticationService(username) {\r\n        return axios.get(`${API_URL}/basicauth`,\r\n            { headers: { authorization: this.createBasicAuthToken(username) } })\r\n    }\r\n\r\n    executeJwtAuthenticationService(username) {\r\n        return axios.post(`${API_URL}/authenticate`, {\r\n            username\r\n        })\r\n    }\r\n\r\n    createBasicAuthToken(username) {\r\n        return 'Basic ' + window.btoa(username)\r\n    }\r\n\r\n    registerSuccessfulLogin(username) {\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username))\r\n    }\r\n\r\n    registerSuccessfulLoginForJwt(username, token) {\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n        this.setupAxiosInterceptors(this.createJWTToken(token))\r\n    }\r\n\r\n    createJWTToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n\r\n    logout() {\r\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return false\r\n        return true\r\n    }\r\n\r\n    getLoggedInUserName() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return ''\r\n        return user\r\n    }\r\n\r\n    setupAxiosInterceptors(token) {\r\n\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}