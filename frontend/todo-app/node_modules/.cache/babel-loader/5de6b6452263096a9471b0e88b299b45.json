{"ast":null,"code":"import _classCallCheck from \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Bachelor of Computer Science\\\\3rd Semester\\\\Software Engineering - Process & Tools\\\\SEPTOne\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport axios from 'axios';\nimport { API_URL } from '../../Constants';\nexport var USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nvar AuthenticationService =\n/*#__PURE__*/\nfunction () {\n  function AuthenticationService() {\n    _classCallCheck(this, AuthenticationService);\n  }\n\n  _createClass(AuthenticationService, [{\n    key: \"oauthGoogle\",\n    value: function oauthGoogle(data) {\n      var resp = axios.post(\"\".concat(API_URL, \"/authenticate\"), {\n        access_token: data\n      });\n      console.log(resp);\n    }\n  }, {\n    key: \"executeBasicAuthenticationService\",\n    value: function executeBasicAuthenticationService(username, token) {\n      var resp = axios.get(\"\".concat(API_URL, \"/basicauth\"), {\n        headers: {\n          authorization: token\n        }\n      });\n      console.log(resp);\n      return resp;\n    }\n  }, {\n    key: \"executeJwtAuthenticationService\",\n    value: function executeJwtAuthenticationService(username, email) {\n      var resp = axios.post(\"\".concat(API_URL, \"/authenticate\"), {\n        username: username,\n        email: email\n      });\n      console.log(resp);\n      return resp;\n    }\n  }, {\n    key: \"registerSuccessfulLogin\",\n    value: function registerSuccessfulLogin(username, token) {\n      sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n      this.setupAxiosInterceptors(token);\n    }\n  }, {\n    key: \"registerSuccessfulLoginForJwt\",\n    value: function registerSuccessfulLoginForJwt(username, token) {\n      sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n      this.setupAxiosInterceptors(this.createJWTToken(token));\n    }\n  }, {\n    key: \"createJWTToken\",\n    value: function createJWTToken(token) {\n      return 'Bearer ' + token;\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n  }, {\n    key: \"isUserLoggedIn\",\n    value: function isUserLoggedIn() {\n      var user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n      if (user === null) return false;\n      return true;\n    }\n  }, {\n    key: \"getLoggedInUserName\",\n    value: function getLoggedInUserName() {\n      var user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n      if (user === null) return '';\n      return user;\n    }\n  }, {\n    key: \"setupAxiosInterceptors\",\n    value: function setupAxiosInterceptors(token) {\n      var _this = this;\n\n      axios.interceptors.request.use(function (config) {\n        if (_this.isUserLoggedIn()) {\n          config.headers.authorization = token;\n        }\n\n        return config;\n      });\n    }\n  }]);\n\n  return AuthenticationService;\n}();\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["E:\\Bachelor of Computer Science\\3rd Semester\\Software Engineering - Process & Tools\\SEPTOne\\frontend\\todo-app\\src\\components\\todo\\AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","data","resp","post","access_token","console","log","username","token","get","headers","authorization","email","sessionStorage","setItem","setupAxiosInterceptors","createJWTToken","removeItem","user","getItem","interceptors","request","use","config","isUserLoggedIn"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,OAAO,IAAMC,gCAAgC,GAAG,mBAAzC;;IAEDC,qB;;;;;;;;;gCAEUC,I,EAAM;AACd,UAAMC,IAAI,GAAEL,KAAK,CAACM,IAAN,WAAcL,OAAd,oBAAsC;AAC9CM,QAAAA,YAAY,EAAEH;AADgC,OAAtC,CAAZ;AAGAI,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACH;;;sDAEiCK,Q,EAAUC,K,EAAO;AAC/C,UAAMN,IAAI,GAAEL,KAAK,CAACY,GAAN,WAAaX,OAAb,iBACR;AAAEY,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAEH;AAAjB;AAAX,OADQ,CAAZ;AAEAH,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,aAAOA,IAAP;AACH;;;oDAE+BK,Q,EAAUK,K,EAAO;AAC7C,UAAMV,IAAI,GAAEL,KAAK,CAACM,IAAN,WAAcL,OAAd,oBAAsC;AAC9CS,QAAAA,QAAQ,EAARA,QAD8C;AAE9CK,QAAAA,KAAK,EAALA;AAF8C,OAAtC,CAAZ;AAIAP,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,aAAOA,IAAP;AACH;;;4CAEuBK,Q,EAAUC,K,EAAO;AACrCK,MAAAA,cAAc,CAACC,OAAf,CAAuBf,gCAAvB,EAAyDQ,QAAzD;AACA,WAAKQ,sBAAL,CAA4BP,KAA5B;AACH;;;kDAE6BD,Q,EAAUC,K,EAAO;AAC3CK,MAAAA,cAAc,CAACC,OAAf,CAAuBf,gCAAvB,EAAyDQ,QAAzD;AACA,WAAKQ,sBAAL,CAA4B,KAAKC,cAAL,CAAoBR,KAApB,CAA5B;AACH;;;mCAEcA,K,EAAO;AAClB,aAAO,YAAYA,KAAnB;AACH;;;6BAEQ;AACLK,MAAAA,cAAc,CAACI,UAAf,CAA0BlB,gCAA1B;AACH;;;qCAEgB;AACb,UAAImB,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuBpB,gCAAvB,CAAX;AACA,UAAImB,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,aAAO,IAAP;AACH;;;0CAEqB;AAClB,UAAIA,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuBpB,gCAAvB,CAAX;AACA,UAAImB,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,aAAOA,IAAP;AACH;;;2CAEsBV,K,EAAO;AAAA;;AAE1BX,MAAAA,KAAK,CAACuB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACI,UAACC,MAAD,EAAY;AACR,YAAI,KAAI,CAACC,cAAL,EAAJ,EAA2B;AACvBD,UAAAA,MAAM,CAACb,OAAP,CAAeC,aAAf,GAA+BH,KAA/B;AACH;;AACD,eAAOe,MAAP;AACH,OANL;AAQH;;;;;;AAGL,eAAe,IAAIvB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\nimport { API_URL } from '../../Constants'\r\n\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\r\n\r\nclass AuthenticationService {\r\n\r\n    oauthGoogle(data) {\r\n        const resp= axios.post(`${API_URL}/authenticate`, {\r\n            access_token: data\r\n        })\r\n        console.log(resp)\r\n    }\r\n\r\n    executeBasicAuthenticationService(username, token) {\r\n        const resp= axios.get(`${API_URL}/basicauth`,\r\n            { headers: { authorization: token}})\r\n        console.log(resp)\r\n        return resp;\r\n    }\r\n\r\n    executeJwtAuthenticationService(username, email) {\r\n        const resp= axios.post(`${API_URL}/authenticate`, {\r\n            username,\r\n            email\r\n        })\r\n        console.log(resp)\r\n        return resp;\r\n    }\r\n\r\n    registerSuccessfulLogin(username, token) {\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n        this.setupAxiosInterceptors(token)\r\n    }\r\n\r\n    registerSuccessfulLoginForJwt(username, token) {\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n        this.setupAxiosInterceptors(this.createJWTToken(token))\r\n    }\r\n\r\n    createJWTToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return false\r\n        return true\r\n    }\r\n\r\n    getLoggedInUserName() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return ''\r\n        return user\r\n    }\r\n\r\n    setupAxiosInterceptors(token) {\r\n\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}