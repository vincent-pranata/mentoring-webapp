{"ast":null,"code":"import _classCallCheck from \"/Users/guoxinshan/Documents/projects/SEPT/SEPTOne/frontend/todo-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/guoxinshan/Documents/projects/SEPT/SEPTOne/frontend/todo-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport axios from 'axios';\nimport { API_URL, JPA_API_URL } from '../../Constants';\n\nvar MentorDataService =\n/*#__PURE__*/\nfunction () {\n  function MentorDataService() {\n    _classCallCheck(this, MentorDataService);\n  }\n\n  _createClass(MentorDataService, [{\n    key: \"retrieveAllMentors\",\n    //get all mentors by username from backend\n    value: function retrieveAllMentors(name) {\n      //console.log('executed service')\n      return axios.get(\"\".concat(JPA_API_URL, \"/users/\").concat(name, \"/mentors\"));\n    } //get a mentor from backend\n\n  }, {\n    key: \"retrieveMentor\",\n    value: function retrieveMentor(name, id) {\n      //console.log('executed service')\n      return axios.get(\"\".concat(JPA_API_URL, \"/users/\").concat(name, \"/mentors/\").concat(id));\n    } //delete a mentor for backend\n\n  }, {\n    key: \"deleteMentor\",\n    value: function deleteMentor(name, id) {\n      //console.log('executed service')\n      return axios.delete(\"\".concat(JPA_API_URL, \"/users/\").concat(name, \"/mentors/\").concat(id));\n    } //update a mentor from backend\n\n  }, {\n    key: \"updateMentor\",\n    value: function updateMentor(name, id, mentor) {\n      //console.log('executed service')\n      return axios.put(\"\".concat(JPA_API_URL, \"/users/\").concat(name, \"/mentors/\").concat(id), mentor);\n    } //create a new mentor for backend\n\n  }, {\n    key: \"createMentor\",\n    value: function createMentor(name, mentor) {\n      //console.log('executed service')\n      return axios.post(\"\".concat(JPA_API_URL, \"/users/\").concat(name, \"/mentors/\"), mentor);\n    } //check if mentor of a course is added and get boolean \n\n  }, {\n    key: \"isMentor\",\n    value: function isMentor(name, courseId) {\n      return axios.get(\"\".concat(JPA_API_URL, \"/users/\").concat(name, \"/mentors/\").concat(courseId, \"/isMentor\"));\n    } //get all mentors by course id  \n\n  }, {\n    key: \"getActiveMentor\",\n    value: function getActiveMentor(courseId) {\n      return axios.get(\"\".concat(JPA_API_URL, \"/users/mentors/\").concat(courseId, \"/getActiveMentor\"));\n    } //set mentor ratings\n\n  }, {\n    key: \"setRate\",\n    value: function setRate(mentorName, mentorId, rate) {\n      return axios.put(\"\".concat(JPA_API_URL, \"/users/\").concat(mentorName, \"/mentors/\").concat(mentorId, \"/setRate/\").concat(rate));\n    }\n  }]);\n\n  return MentorDataService;\n}();\n\nexport default new MentorDataService();","map":{"version":3,"sources":["/Users/guoxinshan/Documents/projects/SEPT/SEPTOne/frontend/todo-app/src/api/todo/MentorDataService.js"],"names":["axios","API_URL","JPA_API_URL","MentorDataService","name","get","id","delete","mentor","put","post","courseId","mentorName","mentorId","rate"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,iBAArC;;IAEMC,iB;;;;;;;;;AAEF;uCACmBC,I,EAAM;AACrB;AACA,aAAOJ,KAAK,CAACK,GAAN,WAAaH,WAAb,oBAAkCE,IAAlC,cAAP;AACH,K,CAED;;;;mCACeA,I,EAAME,E,EAAI;AACrB;AACA,aAAON,KAAK,CAACK,GAAN,WAAaH,WAAb,oBAAkCE,IAAlC,sBAAkDE,EAAlD,EAAP;AACH,K,CAED;;;;iCACaF,I,EAAME,E,EAAI;AACnB;AACA,aAAON,KAAK,CAACO,MAAN,WAAgBL,WAAhB,oBAAqCE,IAArC,sBAAqDE,EAArD,EAAP;AACH,K,CAED;;;;iCACaF,I,EAAME,E,EAAIE,M,EAAQ;AAC3B;AACA,aAAOR,KAAK,CAACS,GAAN,WAAaP,WAAb,oBAAkCE,IAAlC,sBAAkDE,EAAlD,GAAwDE,MAAxD,CAAP;AACH,K,CAED;;;;iCACaJ,I,EAAMI,M,EAAQ;AACvB;AACA,aAAOR,KAAK,CAACU,IAAN,WAAcR,WAAd,oBAAmCE,IAAnC,gBAAoDI,MAApD,CAAP;AACH,K,CAED;;;;6BACSJ,I,EAAMO,Q,EAAS;AACpB,aAAOX,KAAK,CAACK,GAAN,WAAaH,WAAb,oBAAkCE,IAAlC,sBAAkDO,QAAlD,eAAP;AACH,K,CAED;;;;oCACgBA,Q,EAAS;AACrB,aAAOX,KAAK,CAACK,GAAN,WAAaH,WAAb,4BAA0CS,QAA1C,sBAAP;AACH,K,CAED;;;;4BACQC,U,EAAYC,Q,EAAUC,I,EAAK;AAC/B,aAAOd,KAAK,CAACS,GAAN,WAAaP,WAAb,oBAAkCU,UAAlC,sBAAwDC,QAAxD,sBAA4EC,IAA5E,EAAP;AACH;;;;;;AAEL,eAAe,IAAIX,iBAAJ,EAAf","sourcesContent":["import axios from 'axios'\nimport { API_URL, JPA_API_URL } from '../../Constants'\n\nclass MentorDataService {\n\n    //get all mentors by username from backend\n    retrieveAllMentors(name) {\n        //console.log('executed service')\n        return axios.get(`${JPA_API_URL}/users/${name}/mentors`);\n    }\n\n    //get a mentor from backend\n    retrieveMentor(name, id) {\n        //console.log('executed service')\n        return axios.get(`${JPA_API_URL}/users/${name}/mentors/${id}`);\n    }\n\n    //delete a mentor for backend\n    deleteMentor(name, id) {\n        //console.log('executed service')\n        return axios.delete(`${JPA_API_URL}/users/${name}/mentors/${id}`);\n    }\n\n    //update a mentor from backend\n    updateMentor(name, id, mentor) {\n        //console.log('executed service')\n        return axios.put(`${JPA_API_URL}/users/${name}/mentors/${id}`, mentor);\n    }\n\n    //create a new mentor for backend\n    createMentor(name, mentor) {\n        //console.log('executed service')\n        return axios.post(`${JPA_API_URL}/users/${name}/mentors/`, mentor);\n    }\n\n    //check if mentor of a course is added and get boolean \n    isMentor(name, courseId){\n        return axios.get(`${JPA_API_URL}/users/${name}/mentors/${courseId}/isMentor`);\n    }\n\n    //get all mentors by course id  \n    getActiveMentor(courseId){\n        return axios.get(`${JPA_API_URL}/users/mentors/${courseId}/getActiveMentor`);\n    }\n\n    //set mentor ratings\n    setRate(mentorName, mentorId, rate){\n        return axios.put(`${JPA_API_URL}/users/${mentorName}/mentors/${mentorId}/setRate/${rate}`);\n    }\n}\nexport default new MentorDataService()"]},"metadata":{},"sourceType":"module"}