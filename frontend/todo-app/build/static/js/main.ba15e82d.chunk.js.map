{"version":3,"sources":["../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/Constants.js","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/components/todo/AuthenticationService.js","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/components/todo/AuthenticatedRoute.jsx","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/components/todo/LoginComponent.jsx","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/api/todo/CourseDataService.js","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/components/todo/ListCoursesComponent.jsx","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/api/todo/MentorDataService.js","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/components/todo/ListMentorsComponent.jsx","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/api/todo/MenteeDataService.js","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/components/todo/ListMenteesComponent.jsx","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/api/todo/GroupService.js","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/components/todo/ListGroupsComponent.jsx","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/components/todo/ErrorComponent.jsx","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/components/todo/HeaderComponent.jsx","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/components/todo/FooterComponent.jsx","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/components/todo/LogoutComponent.jsx","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/api/todo/HelloWorldService.js","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/components/todo/WelcomeComponent.jsx","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/components/todo/CourseComponent.jsx","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/components/todo/MentorComponent.jsx","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/components/todo/MenteeComponent.jsx","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/components/todo/JoinGroupComponent.jsx","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/components/todo/CreateGroupComponent.jsx","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/components/todo/CourseUpdateComponent.jsx","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/components/todo/MenteeUpdateComponent.jsx","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/components/todo/TodoApp.jsx","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/App.js","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/serviceWorker.js","../../../../../../../Desktop/SEPTOne-master/frontend/todo-app/src/index.js"],"names":["API_URL","JPA_API_URL","todo_AuthenticationService","username","password","axios","get","concat","headers","authorization","this","createBasicAuthToken","post","window","btoa","sessionStorage","setItem","setupAxiosInterceptors","token","createJWTToken","removeItem","getItem","user","_this","interceptors","request","use","config","isUserLoggedIn","AuthenticatedRoute","AuthenticationService","react_default","a","createElement","Route","props","Redirect","to","Component","LoginComponent","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasLoginFailed","showSuccessMessage","handleChange","bind","assertThisInitialized","loginClicked","event","setState","defineProperty","target","name","value","_this2","executeBasicAuthenticationService","then","registerSuccessfulLogin","history","push","catch","executeJwtAuthenticationService","response","registerSuccessfulLoginForJwt","data","className","type","onChange","onClick","todo_CourseDataService","id","delete","course","put","courseId","ListCoursesComponent","courses","message","deleteCourseClicked","updateCourseClicked","addCourseClicked","refreshCourses","nextProps","nextState","getLoggedInUserName","CourseDataService","retrieveAllCourses","_this3","deleteCourse","_this4","class","map","key","coursename","completed","toString","grade","todo_MentorDataService","mentor","mentorName","mentorId","rate","ListMentorsComponent","mentors","deleteMentorClicked","updateMentorClicked","addMentorClicked","refreshMentors","MentorDataService","retrieveAllMentors","deleteMentor","courseName","moment","startdate","format","todo_MenteeDataService","mentee","ListMenteesComponent","e","rating","mentees","startDate","totalRate","numOfMentee","deleteMenteeClicked","updateMenteeClicked","addMenteeClicked","refreshMentees","updateRating","getMentor","MenteeDataService","retrieveAllMentees","deleteMentee","alert","mentorname","mentorid","mentorDate","mentorEmail","isCompleted","reactjs_popup_es","trigger","onClickUpdate","formik_esm","onFocus","mentorID","min","max","todo_GroupService","group","ListJoinGroupsComponent","console","log","groups","numberOfMember","deleteGroupClicked","createStudyGroupClicked","joinStudyGroupClicked","refreshGroups","GroupService","retrieveAllGroups","deleteGroup","groupName","style","marginLeft","ErrorComponent","HeaderComponent","href","Link","logout","FooterComponent","LogoutComponent","Fragment","todo_HelloWorldService","WelcomeComponent","retrieveWelcomeMessage","welcomeMessage","handleSuccessfulResponse","handleError","match","params","HelloWorldService","executeHelloWorldPathVariableService","error","errorMessage","CourseComponent","onBlur","courseExist","onSubmit","validate","checkCourse","values","errors","createCourse","_this$state","initialValues","validateOnChange","validateOnBlur","enableReinitialize","component","setValidationValues","MentorComponent","handleCourseChange","index","nativeEvent","selectedIndex","options","getAttribute","label","text","keyId","isMentor","targetDate","Date","checkGrade","createMentor","_this5","onBlurCourse","data-key","MenteeComponent","handleMentorChange","isMentee","getActiveMentor","checkMentee","componentDidMount","isValid","createMentee","JoinGroupComponent","handleGroupChange","parseInt","getActiveGroups","createGroup","CreateGroupComponent","CourseUpdateComponent","retrieveCourse","form","val","radios","elements","i","len","length","checked","getRadioVal","document","getElementById","updateCourse","MenteeUpdateComponent","retrieveMentee","updateMentee","TodoApp","BrowserRouter","todo_HeaderComponent","Switch","path","exact","todo_AuthenticatedRoute","ListGroupsComponent","todo_FooterComponent","App","todo_TodoApp","Boolean","location","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba15e82d.chunk.js","sourcesContent":["export const API_URL = 'https://backend-dot-wise-isotope-255311.appspot.com'\nexport const JPA_API_URL = 'https://backend-dot-wise-isotope-255311.appspot.com/jpa'\n","import axios from 'axios'\nimport { API_URL } from '../../Constants'\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        return axios.get(`${API_URL}/basicauth`,\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    }\n\n    executeJwtAuthenticationService(username, password) {\n        return axios.post(`${API_URL}/authenticate`, {\n            username,\n            password\n        })\n    }\n\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    registerSuccessfulLogin(username, password) {\n        //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n        //console.log('registerSuccessfulLogin')\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(token) {\n\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService()","import React, { Component } from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass AuthenticatedRoute extends Component {\n    render() {\n        if (AuthenticationService.isUserLoggedIn()) {\n            return <Route {...this.props} />\n        } else {\n            return <Redirect to=\"/login\" />\n        }\n\n    }\n}\n\nexport default AuthenticatedRoute","import React, { Component } from 'react'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass LoginComponent extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            username: 'sept',\n            password: 'dummy',\n            hasLoginFailed: false,\n            showSuccessMessage: false\n        }\n        // this.handleUsernameChange = this.handleUsernameChange.bind(this)\n        // this.handlePasswordChange = this.handlePasswordChange.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.loginClicked = this.loginClicked.bind(this)\n    }\n\n    handleChange(event) {\n        //console.log(this.state);\n        this.setState(\n            {\n                [event.target.name]\n                    : event.target.value\n            }\n        )\n    }\n\n    // handleUsernameChange(event) {\n    //     console.log(event.target.name);\n    //     this.setState(\n    //         {\n    //             [event.target.name]\n    //               :event.target.value\n    //         }\n    //     )\n    // }\n\n    // handlePasswordChange(event) {\n    //     console.log(event.target.value);\n    //     this.setState({password:event.target.value})\n    // }\n\n    loginClicked() {\n        //sept,dummy\n        // if(this.state.username==='sept' && this.state.password==='dummy'){\n        //     AuthenticationService.registerSuccessfulLogin(this.state.username,this.state.password)\n        //     this.props.history.push(`/welcome/${this.state.username}`)\n        //     //this.setState({showSuccessMessage:true})\n        //     //this.setState({hasLoginFailed:false})\n        // }\n        // else {\n        //     this.setState({showSuccessMessage:false})\n        //     this.setState({hasLoginFailed:true})\n        // }\n\n        AuthenticationService\n        .executeBasicAuthenticationService(this.state.username, this.state.password)\n        .then(() => {\n            AuthenticationService.registerSuccessfulLogin(this.state.username,this.state.password)\n            this.props.history.push(`/welcome/${this.state.username}`)\n        }).catch( () =>{\n            this.setState({showSuccessMessage:false})\n            this.setState({hasLoginFailed:true})\n        })\n        AuthenticationService\n            .executeJwtAuthenticationService(this.state.username, this.state.password)\n            .then((response) => {\n                AuthenticationService.registerSuccessfulLoginForJwt(this.state.username, response.data.token)\n                this.props.history.push(`/welcome/${this.state.username}`)\n            }).catch(() => {\n                this.setState({ showSuccessMessage: false })\n                this.setState({ hasLoginFailed: true })\n            })\n\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Login</h1>\n                <div className=\"container\">\n                    {/*<ShowInvalidCredentials hasLoginFailed={this.state.hasLoginFailed}/>*/}\n                    {this.state.hasLoginFailed && <div className=\"alert alert-warning\">Invalid Credentials or something is wrong</div>}\n                    {this.state.showSuccessMessage && <div>Login Sucessful</div>}\n                    {/*<ShowLoginSuccessMessage showSuccessMessage={this.state.showSuccessMessage}/>*/}\n                    User Name: <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} />\n                    Password: <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\n                    <button className=\"btn btn-success\" onClick={this.loginClicked}>Login</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default LoginComponent"," import axios from 'axios'\nimport { API_URL, JPA_API_URL } from '../../Constants'\n\nclass CourseDataService {\n\n    //get a list of courses from backend\n    retrieveAllCourses(name) {\n        return axios.get(`${JPA_API_URL}/users/${name}/courses`);\n    }\n\n    //get a course from backend\n    retrieveCourse(name, id) {\n        return axios.get(`${JPA_API_URL}/users/${name}/courses/${id}`);\n    }\n\n    //delete a course for backend\n    deleteCourse(name, id) {\n        return axios.delete(`${JPA_API_URL}/users/${name}/courses/${id}`);\n    }\n\n    //update a course from backend\n    updateCourse(name, id, course) {\n        return axios.put(`${JPA_API_URL}/users/${name}/courses/${id}`, course);\n    }\n\n    //creates a new course for backend\n    createCourse(name, course) {\n        return axios.post(`${JPA_API_URL}/users/${name}/courses/`, course);\n    }\n    \n    //check grade in backend and get boolean\n    checkGrade(name, id) {\n        return axios.get(`${JPA_API_URL}/users/${name}/courses/${id}/grade`);\n    }\n\n    //check if courses added in backend and get boolean\n    checkCourse(name, courseId) {\n        return axios.get(`${JPA_API_URL}/users/${name}/courses/${courseId}/checkExistingCourse`);\n    }\n}\n\nexport default new CourseDataService()","import React, { Component } from 'react'\nimport CourseDataService from '../../api/todo/CourseDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass ListCoursesComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            courses: [],\n            message: null\n        }\n        this.deleteCourseClicked = this.deleteCourseClicked.bind(this)\n        this.updateCourseClicked = this.updateCourseClicked.bind(this)\n        this.addCourseClicked = this.addCourseClicked.bind(this)\n        this.refreshCourses = this.refreshCourses.bind(this)\n    }\n\n    componentWillUnmount() {\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return true\n    }\n\n    componentDidMount() {\n        this.refreshCourses();\n    }\n\n    //reset the page wheter something is added, updated or deleted\n    refreshCourses() {\n        //get the list of courses and set it to an array\n        let username = AuthenticationService.getLoggedInUserName()\n        CourseDataService.retrieveAllCourses(username)\n            .then(\n                response => {\n                    this.setState({ courses: response.data })\n                }\n            )\n    }\n\n    //what happen when delete button is clicked\n    deleteCourseClicked(id) {\n        let username = AuthenticationService.getLoggedInUserName()\n        CourseDataService.deleteCourse(username, id)\n            .then(\n                response => {\n                    this.setState({ message: `Delete of course ${id} Successful` })\n                    this.refreshCourses()\n                }\n            )\n\n    }\n\n    //what happen when add button is clicked\n    addCourseClicked() {\n        this.props.history.push(`/courses/-1`)\n    }\n\n    //what happen when update button is clicked\n    updateCourseClicked(id) {\n        this.props.history.push(`/update/courses/${id}`)\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Courses List</h1>\n                {this.state.message && <div class=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Course ID</th>\n                                <th>Course Name</th>\n                                <th>IsCompleted?</th>\n                                <th>Grade</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.courses.map(\n                                    course =>\n                                        <tr key={course.id}>\n                                            <td>{course.courseId}</td>\n                                            <td>{course.coursename}</td>\n                                            <td>{course.completed.toString()}</td>\n                                            <td>{course.grade}</td>\n                                            <td><button className=\"btn btn-success\" onClick={() => this.updateCourseClicked(course.id)}>Update</button></td>\n                                            <td><button className=\"btn btn-warning\" onClick={() => this.deleteCourseClicked(course.id)}>Delete</button></td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-success\" onClick={this.addCourseClicked}>Add</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListCoursesComponent","import axios from 'axios'\nimport { API_URL, JPA_API_URL } from '../../Constants'\n\nclass MentorDataService {\n\n    //get all mentors by username from backend\n    retrieveAllMentors(name) {\n        //console.log('executed service')\n        return axios.get(`${JPA_API_URL}/users/${name}/mentors`);\n    }\n\n    //get a mentor from backend\n    retrieveMentor(name, id) {\n        //console.log('executed service')\n        return axios.get(`${JPA_API_URL}/users/${name}/mentors/${id}`);\n    }\n\n    //delete a mentor for backend\n    deleteMentor(name, id) {\n        //console.log('executed service')\n        return axios.delete(`${JPA_API_URL}/users/${name}/mentors/${id}`);\n    }\n\n    //update a mentor from backend\n    updateMentor(name, id, mentor) {\n        //console.log('executed service')\n        return axios.put(`${JPA_API_URL}/users/${name}/mentors/${id}`, mentor);\n    }\n\n    //create a new mentor for backend\n    createMentor(name, mentor) {\n        //console.log('executed service')\n        return axios.post(`${JPA_API_URL}/users/${name}/mentors/`, mentor);\n    }\n\n    //check if mentor of a course is added and get boolean \n    isMentor(name, courseId){\n        return axios.get(`${JPA_API_URL}/users/${name}/mentors/${courseId}/isMentor`);\n    }\n\n    //get all mentors by course id  \n    getActiveMentor(courseId){\n        return axios.get(`${JPA_API_URL}/users/mentors/${courseId}/getActiveMentor`);\n    }\n\n    //set mentor ratings\n    setRate(mentorName, mentorId, rate){\n        return axios.put(`${JPA_API_URL}/users/${mentorName}/mentors/${mentorId}/setRate/${rate}`);\n    }\n}\nexport default new MentorDataService()","import React, { Component } from 'react'\nimport MentorDataService from '../../api/todo/MentorDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\nimport moment from 'moment'\n\nclass ListMentorsComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            mentors: [],\n            message: null\n        }\n        this.deleteMentorClicked = this.deleteMentorClicked.bind(this)\n        this.updateMentorClicked = this.updateMentorClicked.bind(this)\n        this.addMentorClicked = this.addMentorClicked.bind(this)\n        this.refreshMentors = this.refreshMentors.bind(this)\n    } \n\n    componentWillUnmount() {\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return true\n    }\n\n    componentDidMount() {\n        this.refreshMentors();\n    }\n\n    //refresh the page when something is updated, clicked, and deleted\n    refreshMentors() {\n        let username = AuthenticationService.getLoggedInUserName()\n        MentorDataService.retrieveAllMentors(username)\n            .then(\n                response => {\n                    this.setState({ mentors: response.data })\n                }\n            )\n    }\n\n    //what happens when delete button is clicked\n    deleteMentorClicked(id) {\n        let username = AuthenticationService.getLoggedInUserName()\n        MentorDataService.deleteMentor(username, id)\n            .then(\n                response => {\n                    this.setState({ message: `Delete of mentor ${id} Successful` })\n                    this.refreshMentors()\n                }\n            )\n\n    }\n\n    //what happens when add button is clicked\n    addMentorClicked() {\n        this.props.history.push(`/mentors/-1`)\n    }\n\n    //what happens when update button is clicked\n    updateMentorClicked(id) {\n        this.props.history.push(`/mentors/${id}`)\n\n    }\n\n    //what to print out    \n    render() {\n        return (\n            <div>\n                <h1>Apply As Mentor</h1>\n                {this.state.message && <div class=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Course ID</th>\n                                <th>Course Name</th>\n                                <th>Mentor Since</th>\n                                <th>Ratings</th>\n                                <th>Quit</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.mentors.map(\n                                    mentor =>\n                                        <tr key={mentor.id}>\n                                            <td>{mentor.courseId}</td>\n                                            <td>{mentor.courseName}</td>\n                                            <td>{moment(mentor.startdate).format('YYYY-MM-DD')}</td>\n                                            <td>{mentor.rate}</td>\n                                            <td><button className=\"btn btn-warning\" onClick={() => this.deleteMentorClicked(mentor.id)}>Quit</button></td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-success\" onClick={this.addMentorClicked}>Apply</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListMentorsComponent","import axios from 'axios'\nimport { API_URL, JPA_API_URL } from '../../Constants'\n\nclass MenteeDataService {\n\n    //get all mentees from backend\n    retrieveAllMentees(name) {\n        //console.log('executed service')\n        return axios.get(`${JPA_API_URL}/users/${name}/mentees`);\n    }\n\n    //get a mentee from backend\n    retrieveMentee(name, id) {\n        //console.log('executed service')\n        return axios.get(`${JPA_API_URL}/users/${name}/mentees/${id}`);\n    }\n\n    //delete a mentee for backend\n    deleteMentee(name, id) {\n        //console.log('executed service')\n        return axios.delete(`${JPA_API_URL}/users/${name}/mentees/${id}`);\n    }\n\n    //update a mentee from backend\n    updateMentee(name, id, mentee) {\n        //console.log('executed service')\n        return axios.put(`${JPA_API_URL}/users/${name}/mentees/${id}`, mentee);\n    }\n\n    //create a new mentee for backend\n    createMentee(name, mentee) {\n        //console.log('executed service')\n        return axios.post(`${JPA_API_URL}/users/${name}/mentees/`, mentee);\n    }\n\n    //check if mentee is added and get boolean\n    checkMentee(name, courseId) {\n        return axios.get(`${JPA_API_URL}/users/${name}/mentees/${courseId}/checkMentee`)\n    }\n}\n\nexport default new MenteeDataService()","import React, { Component } from 'react'\nimport MenteeDataService from '../../api/todo/MenteeDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\nimport moment from 'moment'\nimport Popup from \"reactjs-popup\"\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport MentorDataService from '../../api/todo/MentorDataService.js'\n\nclass ListMenteesComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            mentees: [],\n            message: null,\n            rating: '',\n\n            mentorId:'',\n            mentorName:'',\n            courseId:'',\n            courseName:'',\n            startDate:'',\n            totalRate:0,\n            numOfMentee:0\n            \n        }\n        this.deleteMenteeClicked = this.deleteMenteeClicked.bind(this)\n        this.updateMenteeClicked = this.updateMenteeClicked.bind(this)\n        this.addMenteeClicked = this.addMenteeClicked.bind(this)\n        this.refreshMentees = this.refreshMentees.bind(this)\n        this.updateRating = this.updateRating.bind(this)\n        this.getMentor = this.getMentor.bind(this)\n    }\n\n    componentWillUnmount() {\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return true\n    }\n\n    componentDidMount() {\n        this.refreshMentees();\n    }\n\n    //refresh the page when something is updated, clicked, and deleted\n    refreshMentees() {\n        let username = AuthenticationService.getLoggedInUserName()\n        MenteeDataService.retrieveAllMentees(username)\n            .then(\n                response => {\n                    this.setState({ mentees: response.data })\n                }\n            )\n    }\n\n    //what happens when delete button is clicked\n    deleteMenteeClicked(id) {\n        let username = AuthenticationService.getLoggedInUserName()\n\n        MenteeDataService.deleteMentee(username, id)\n            .then(\n                response => {\n                    this.setState({ message: `Delete of mentee ${id} Successful` })\n                    this.refreshMentees()\n                }\n            )\n    }\n\n    //what happens when update button is clicked\n    updateMenteeClicked(id) {\n        this.props.history.push(`update/mentees/${id}`)\n    }\n\n    //what happens when add button is clicked\n    addMenteeClicked() {\n        this.props.history.push(`/mentees/-1`)\n    }\n\n    //what happend when submit button is clicked\n    updateRating(id, courseId, mentorName){\n        let username = AuthenticationService.getLoggedInUserName()\n\n        if(this.state.rating!=\"\") {\n            \n            // let mentor = {\n            //     id:this.state.mentorId,\n            //     username:this.state.mentorName,\n            //     courseId:this.state.courseId,\n            //     courseName:this.state.courseName,\n            //     startdate:this.state.startDate,\n            //     totalRate:this.state.totalRate,\n            //     numberOfMentee:this.state.numOfMentee\n            // }\n\n            this.deleteMenteeClicked(id)\n        }\n        else{\n            alert(\"Please input a value for rating\")\n        }\n    }\n\n    //handle the change input for rating \n    handleChange = (e) => {\n        this.setState({\n            rating:e.target.value});\n    };\n\n    //for some reason it goes into here but doesnt set anything ????????\n    getMentor(mentorname, mentorid) {\n        // MentorDataService.setRate(mentorname, mentorid, this.state.rating)\n        \n        // MentorDataService.retrieveMentor(mentorname, mentorid)\n        //     .then(response=>({\n        //         mentorId:mentorid,\n        //         mentorName:mentorname,\n        //         courseId:response.data.courseId,\n        //         courseName:response.data.courseName,\n        //         startDate:moment(response.data.startdate).format('YYYY-MM-DD'),\n        //         totalRate:response.data.rate,\n        //         numOfMentee:response.data.numberOfMentee\n        //     }))\n    }\n\n    //what to print out\n    render() {        \n        return (\n            <div>\n                <h1>Apply As Mentee</h1>\n                {this.state.message && <div class=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Course ID</th>\n                                <th>Course Name</th>\n                                <th>Date</th>\n                                <th>Mentor Name</th>\n                                <th>Mentor Email</th>\n                                <th>IsCompleted?</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.mentees.map(\n                                    mentee =>\n                                        <tr key={mentee.id}>\n                                            <td>{mentee.courseId}</td>\n                                            <td>{mentee.courseName}</td>\n                                            <td>{moment(mentee.mentorDate).format('YYYY-MM-DD')}</td>\n                                            <td>{mentee.mentorName}</td>\n                                            <td>{mentee.mentorEmail}</td>\n                                            <td>{mentee.isCompleted.toString()}</td>\n                                            <td><button className=\"btn btn-success\" onClick={() => this.updateMenteeClicked(mentee.id)}>Update</button></td>\n                                            <td>\n                                                {!mentee.isCompleted && <button className=\"btn btn-warning\" onClick={() => this.deleteMenteeClicked(mentee.id)}>Cancel</button>}\n                                                {mentee.isCompleted && \n                                                    <Popup trigger={<button className=\"btn btn-warning\" onClick={() => this.onClickUpdate(mentee.courseId, mentee.mentorName)}>Delete</button>}>\n                                                        <Formik>\n                                                            <Form>\n                                                                <fieldset className=\"form-group\">\n                                                                    <label>Rating</label>\n                                                                    <Field className=\"form-control\" onChange={this.handleChange.bind(this)} onFocus={() => this.getMentor(mentee.mentorName, mentee.mentorID)} type=\"number\" name=\"rating\" min=\"0\" max=\"5\"/>\n                                                                </fieldset>\n                                                                <button className=\"btn btn-success\" onClick={() => this.updateRating(mentee.id, mentee.mentorName)}>Submit</button>\n                                                            </Form>\n                                                        </Formik>\n                                                    </Popup>}\n                                            </td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-success\" onClick={this.addMenteeClicked}>Apply</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListMenteesComponent","import axios from 'axios'\nimport { API_URL, JPA_API_URL } from '../../Constants'\n\nclass GroupService {\n\n    // get all groups from backend\n    retrieveAllGroups(name) {\n        //console.log('executed service')\n        return axios.get(`${JPA_API_URL}/users/${name}/groups`);\n    }\n\n    //get a group from backend\n    retrieveGroup(name, id) {\n        //console.log('executed service')\n        return axios.get(`${JPA_API_URL}/users/${name}/groups/${id}`);\n    }\n\n    //delete a group for backend\n    deleteGroup(name, id) {\n        //console.log('executed service')\n        return axios.delete(`${JPA_API_URL}/users/${name}/groups/${id}`);\n    }\n\n    //update a group trom backend\n    updateGroup(name, id, group) {\n        //console.log('executed service')\n        return axios.put(`${JPA_API_URL}/users/${name}/groups/${id}`, group);\n    }\n\n    //create a new group for backend\n    createGroup(name, group) {\n        //console.log('executed service')\n        return axios.post(`${JPA_API_URL}/users/${name}/groups`, group);\n    }\n\n    //check if group is joined eyt and get boolean \n    isJoined(name, id) {\n\t    return axios.get(`${JPA_API_URL}/users/${name}/groups/${id}/isJoined`);\n\t}\n\t\n\t// getNumberOfUsers(name,id) {\n\t// \treturn axios.get(`${JPA_API_URL}/users/${name}/groups/${id}/getNumberOfUsers`);\n\t// }\n\t\n\t// addUserToStudyGroup(name, id, user) {\n\t// \treturn axios.put(`${JPA_API_URL}/users/${name}/groups/${id}/addUserToStudyGroup`, user);\n\t// }\n\t\n\t// removeUserFromStudyGroup(name, id, user) {\n\t// \treturn axios.put(`${JPA_API_URL}/users/${name}/groups/${id}/removeUserFromStudyGroup`, user);\n    // }\n    \n    //get groups based on course id from backend\n\tgetActiveGroups(courseId){\n        return axios.get(`${JPA_API_URL}/users/groups/${courseId}/getActiveGroups`);\n    }\n}\n\nexport default new GroupService()","import React, { Component } from 'react'\nimport GroupService from '../../api/todo/GroupService.js'\nimport AuthenticationService from './AuthenticationService.js'\nimport moment from 'moment'\n\nclass ListJoinGroupsComponent extends Component {\n    constructor(props) {\n        console.log('constructor')\n        super(props)\n        this.state = {\n            groups: [],\n            numberOfMember:0,\n            message: null\n        }\n        this.deleteGroupClicked = this.deleteGroupClicked.bind(this)\n        this.createStudyGroupClicked = this.createStudyGroupClicked.bind(this)\n        this.joinStudyGroupClicked = this.joinStudyGroupClicked.bind(this)\n        this.refreshGroups = this.refreshGroups.bind(this)\n    } \n\n    componentWillUnmount() {\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return true\n    }\n\n    componentDidMount() {\n        this.refreshGroups();\n    }\n\n    //refresh the page when something is updated, clicked, and deleted\n    refreshGroups() {\n        let username = AuthenticationService.getLoggedInUserName()\n        GroupService.retrieveAllGroups(username)\n            .then(\n                response => {\n                    this.setState({ groups: response.data })\n                }\n            )\n    }\n\n    //what happens when delete button is clicked\n    deleteGroupClicked(id) {\n        let username = AuthenticationService.getLoggedInUserName()\n        GroupService.deleteGroup(username, id)\n            .then(\n                response => {\n                    this.setState({ message: `Delete of group ${id} Successful` })\n                    this.refreshGroups()\n                }\n            )\n    }\n\n    //what happens when join button is clicked\n    joinStudyGroupClicked() {\n        this.props.history.push(`/joingroups/-1`)\n    }\n\n    //what happens when create button is clicked\n    createStudyGroupClicked() {\n        this.props.history.push(`/creategroups/-1`)\n    }\n\n    //what to print out\n    render() {\n        console.log('render')\n        console.log(this.state.groups)\n        return (\n            <div>\n                <h1>Study Groups</h1>\n                {this.state.message && <div class=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Group Name</th>\n                                <th>Course ID</th>\n                                <th>Course Name</th>\n                                <th>Number of Member</th>\n                                <th>Start Date</th>\n                                <th>Leave</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.groups.map(\n                                    group =>\n                                        <tr key={group.id}>\n                                            <td>{group.groupName}</td>\n                                            <td>{group.courseId}</td>\n                                            <td>{group.courseName}</td>\n                                            <td>{group.numberOfMember}</td>\n                                            <td>{moment(group.startdate).format('YYYY-MM-DD')}</td>\n                                            <td><button className=\"btn btn-warning\" onClick={() => this.deleteGroupClicked(group.id)}>Leave</button></td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-success\" onClick={this.createStudyGroupClicked}>Create</button>   \n                        <button className=\"btn btn-success\" onClick={this.joinStudyGroupClicked} style={({ marginLeft: '0.8rem' })} >Join</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListJoinGroupsComponent","import React from 'react'\n\nfunction ErrorComponent() {\n    return <div>An Error Occurred. I don't know what to do! Contact support at abcd-efgh-ijkl</div>\n}\n\nexport default ErrorComponent","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport AuthenticationService from './AuthenticationService.js'\n\n\nclass HeaderComponent extends Component {\n    render() {\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn();\n        //console.log(isUserLoggedIn);\n\n        return (\n            <header>\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n                    <div><a href=\"https://www.rmit.edu.au/\" className=\"navbar-brand\">RMIT</a></div>\n                    <ul className=\"navbar-nav\">\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to={`/welcome/${AuthenticationService.getLoggedInUserName()}`}>Home</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/courses\">Courses</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/mentors\">Mentors</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/mentees\">Mentees</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/groups\">Groups</Link></li>}\n                    </ul>\n                    <ul className=\"navbar-nav navbar-collapse justify-content-end\">\n                        {!isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/login\">Login</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/logout\" onClick={AuthenticationService.logout}>Logout</Link></li>}\n                    </ul>\n                </nav>\n            </header>\n        )\n    }\n}\n\nexport default HeaderComponent","import React, { Component } from 'react'\n\nclass FooterComponent extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                <span className=\"text-muted\">All Rights Reserved 2019 @RMIT SEPT</span>\n            </footer>\n        )\n    }\n}\n\nexport default FooterComponent","import React, { Component } from 'react'\n\nclass LogoutComponent extends Component {\n    render() {\n        return (\n            <>\n                <h1>You are logged out</h1>\n                <div className=\"container\">\n                    Thank You for Using Our Application.\n                </div>\n            </>\n        )\n    }\n}\n\nexport default LogoutComponent","import axios from 'axios'\n\nclass HelloWorldService {\n\n    executeHelloWorldService() {\n        //console.log('executed service')\n        return axios.get('http://localhost:8080/hello-world');\n    }\n\n    executeHelloWorldBeanService() {\n        //console.log('executed service')\n        return axios.get('http://localhost:8080/hello-world-bean');\n    }\n\n    executeHelloWorldPathVariableService(name) {\n        //console.log('executed service')\n        // let username = 'sept'\n        // let password = 'dummy'\n\n        // let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n\n        return axios.get(`http://localhost:8080/hello-world/path-variable/${name}`\n            // , \n            //     {\n            //         headers : {\n            //             authorization: basicAuthHeader\n            //         }\n            //     }\n        );\n    }\n\n}\n\nexport default new HelloWorldService()","import React, { Component } from 'react'\nimport HelloWorldService from '../../api/todo/HelloWorldService.js'\n\nclass WelcomeComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.retrieveWelcomeMessage = this.retrieveWelcomeMessage.bind(this)\n        this.state = {\n            welcomeMessage: ''\n        }\n        this.handleSuccessfulResponse = this.handleSuccessfulResponse.bind(this)\n        this.handleError = this.handleError.bind(this)\n    }\n\n    render() {\n        return (\n            <>\n                <h1>Welcome!</h1>\n                <div className=\"container\">\n                    Welcome {this.props.match.params.name}.\n                    You can manage your courses, apply as mentor or apply as mentee.\n                </div>\n                <div className=\"container\">\n                    Click here to get a customized welcome message.\n                </div>\n                <div className=\"container\">\n                <button onClick={this.retrieveWelcomeMessage}\n                        className=\"btn btn-success\">Get Welcome Message</button>\n                </div>\n                <div className=\"container\">\n                    {this.state.welcomeMessage}\n                </div>\n\n            </>\n        )\n    }\n\n    retrieveWelcomeMessage() {\n        // HelloWorldService.executeHelloWorldService()\n        // .then( response => this.handleSuccessfulResponse(response) )\n\n        // HelloWorldService.executeHelloWorldBeanService()\n        // .then( response => this.handleSuccessfulResponse(response) )\n\n        HelloWorldService.executeHelloWorldPathVariableService(this.props.match.params.name)\n            .then(response => this.handleSuccessfulResponse(response))\n            .catch(error => this.handleError(error))\n    }\n\n    handleSuccessfulResponse(response) {\n        console.log(response)\n        this.setState({ welcomeMessage: response.data.message })\n    }\n\n    handleError(error) {\n\n        console.log(error.response)\n\n        let errorMessage = '';\n\n        if (error.message)\n            errorMessage += error.message\n\n        if (error.response && error.response.data) {\n            errorMessage += error.response.data.message\n        }\n\n        this.setState({ welcomeMessage: errorMessage })\n    }\n\n}\n\n\nexport default WelcomeComponent","import React, { Component } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport CourseDataService from '../../api/todo/CourseDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass CourseComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: this.props.match.params.id,\n            courseId: '',\n            coursename: '',\n            courseExist:false\n        }\n\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n\n    }\n\n    componentDidMount() {\n    }\n\n    //what happen when not focusing on course name input anymore\n    setValidationValues() {\n        let username = AuthenticationService.getLoggedInUserName()\n\n        //get the boolean value of wheter course is added or not\n        CourseDataService.checkCourse(username, this.state.courseId)\n        .then(response => this.setState({courseExist: response.data})\n            )\n    }\n\n    //validate the inputs\n    validate(values) {\n        let errors = {}\n        if (!values.courseId) {\n            errors.courseId = 'Enter a course ID'\n        }\n\n        if (!values.coursename) {\n            errors.coursename = 'Enter a course name'\n        }\n\n        if (this.state.courseExist==true) {\n            errors.courseId = 'Course ID already existed! Please try again'\n        } \n\n        return errors\n\n    }\n\n    //what happen when submit button is clicked\n    onSubmit(values) {\n        let username = AuthenticationService.getLoggedInUserName()\n\n        let course = {\n            id: this.state.id,\n            courseId: values.courseId,\n            coursename: values.coursename\n        }\n\n        CourseDataService.createCourse(username, course)\n            .then(() => this.props.history.push('/courses'))\n    }\n\n    //what happen when not focusing on course id input\n    onBlur = (event) => {\n        this.setState({courseId: event.target.value});\n    }\n\n    //what to print out\n    render() {\n\n        let { courseId, coursename } = this.state\n        \n        return (\n            <div>\n                <h1>Add Course</h1>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{ courseId, coursename }}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name=\"courseId\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"coursename\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <fieldset className=\"form-group\">\n                                        <label>Course ID</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"courseId\" onBlur={this.onBlur.bind(this)}/>\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Course Name</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"coursename\" onBlur={this.setValidationValues.bind(this)}/>\n                                    </fieldset>\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CourseComponent","import React, { Component } from 'react'\nimport moment from 'moment'\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport CourseDataService from '../../api/todo/CourseDataService.js'\nimport MentorDataService from '../../api/todo/MentorDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass MentorComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            courses: [],\n            id: this.props.match.params.id,\n            keyId:'',\n            courseId: '',\n            coursename: '',\n            grade:false,\n            isMentor:false,\n            targetDate: moment(new Date()).format('YYYY-MM-DD')\n        }\n\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n    }\n\n    componentDidMount() {\n        let username = AuthenticationService.getLoggedInUserName()\n        //get list of courses\n        CourseDataService.retrieveAllCourses(username) \n        .then(response => this.setState({courses: response.data})\n        )        \n    }\n\n    //validate the inputs\n    validate(values) {\n        let errors = {}\n        \n        if (!values.courseId) {\n            errors.courseId = 'Select a Course'\n        }\n        \n        if(this.state.grade===false)\n        {\n            errors.courseId = 'Unnable to become a mentor. Your grade is lower than 70'\n        }\n\n        if(this.state.isMentor===true)\n        {\n            errors.courseId = 'You are have been already registered as a mentor for the selected course'\n        }\n        return errors\n    }\n\n\n    //what happen when not focusing on select course \n    onBlurCourse() {\n        let username = AuthenticationService.getLoggedInUserName()\n        \n        CourseDataService.checkGrade(username, this.state.keyId) \n        .then(response => this.setState({grade: response.data})\n            )\n\n        MentorDataService.isMentor(username, this.state.courseId)\n        .then(response => this.setState({isMentor: response.data})\n            )\n    }\n\n    //handle the changes of select course\n    handleCourseChange = (e) => {\n        let index = e.nativeEvent.target.selectedIndex;\n        let key= e.target.options[index].getAttribute('data-key');\n        let label = e.nativeEvent.target[index].text;\n        let value = e.target.value;\n        \n        this.setState({keyId:key ,courseId:value, coursename:label});\n    };\n\n    //what happen when submit button is clicked\n    onSubmit(values) {\n        let username = AuthenticationService.getLoggedInUserName()\n\n        let mentor = {\n            id: this.state.id,\n            courseId: values.courseId,\n            courseName: values.coursename,\n            startdate: values.startdate\n        }\n        \n        MentorDataService.createMentor(username, mentor)\n            .then(() => this.props.history.push('/mentors'))   \n    }\n\n    //what to print out\n    render() {\n        let { courseId,coursename,startdate } = this.state\n        \n        return (\n            <div>\n                <h1>Mentor Application</h1>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{ courseId,coursename,startdate }}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name=\"courseId\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"courseName\" component=\"div\"\n                                    className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"startdate\" component=\"div\"\n                                    className=\"alert alert-warning\" />\n                                    <fieldset className=\"form-group\">\n                                        <label>Course</label>\n                                        <select\n                                            className=\"form-control\"\n                                            onChange={this.handleCourseChange.bind(this)}\n                                            onBlur={this.onBlurCourse.bind(this)}\n                                            value={this.state.courseId}\n                                            name=\"courseId\"\n                                        >\n                                            <option value=''>Select a course</option>\n                                            {\n                                                this.state.courses.map(\n                                                    course =>\n                                                        <option key={course.id} data-key={course.id} value={course.courseId}>{course.coursename}</option>\n                                                )\n                                            }\n                                        </select>\n                                    </fieldset>\n                                    <button className=\"btn btn-success\" type=\"submit\">Apply</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MentorComponent","import React, { Component } from 'react'\nimport moment from 'moment'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport CourseDataService from '../../api/todo/CourseDataService.js'\nimport MenteeDataService from '../../api/todo/MenteeDataService.js'\nimport MentorDataService from '../../api/todo/MentorDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass MenteeComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            courses: [],\n            mentors: [],\n            id: this.props.match.params.id,\n            courseId: '',\n            coursename: '',\n            mentorId:'',\n            mentorName:'',\n            mentorEmail:'',\n            isMentee:false,\n            mentorDate: moment(new Date()).format('YYYY-MM-DD')\n        }\n\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n    }\n\n    componentDidMount() {\n        let username = AuthenticationService.getLoggedInUserName()\n        //get list of courses\n        CourseDataService.retrieveAllCourses(username) \n        .then(response => this.setState({courses: response.data})\n        )\n\n        if(this.state.courseId!=\"\")\n        {\n            //get lists of mentor based on course id\n            MentorDataService.getActiveMentor(this.state.courseId)\n            .then(response => this.setState({mentors:response.data})\n                )   \n        }\n    }\n    \n    //what happen when not focusing on select course anymore\n    onBlurCourse() {\n        let username = AuthenticationService.getLoggedInUserName()\n        \n        //check if student already become a mentee of selected course id\n        MenteeDataService.checkMentee(username, this.state.courseId)\n        .then(response => this.setState({isMentee: response.data})\n            )\n\n        this.componentDidMount();\n    }\n\n    \n    //validate the inputs\n    validate(values) {\n        let errors = {}\n        if (!values.courseId) {\n            errors.courseId = 'Select a Course ID'\n        }\n\n        if (!moment(values.mentorDate).isValid()) {\n            errors.mentorDate = 'Enter a valid Mentoring Date'\n        }\n\n        if(this.state.isMentee==true)\n        {\n            errors.courseId = 'You are have been already registered as a mentee for the selected course'\n        }\n        \n        return errors\n    }\n\n    //what happen when submit button is clicked\n    onSubmit(values) {\n        let username = AuthenticationService.getLoggedInUserName()\n        \n        let mentee = {\n            id: this.state.id,\n            courseId: values.courseId,\n            courseName: values.coursename,\n            mentorID: values.mentorId,\n            mentorName: values.mentorName,\n            mentorEmail: values.mentorName+\"@gmail.com\",\n            mentorDate: values.mentorDate\n        }\n        MenteeDataService.createMentee(username, mentee)\n            .then(() => this.props.history.push('/mentees'))\n    }\n    \n    //handle the changes of select course\n    handleCourseChange = (e) => {\n        let index = e.nativeEvent.target.selectedIndex;\n        let label = e.nativeEvent.target[index].text;\n        let value = e.target.value;\n\n        this.setState({\n            courseId:value, coursename:label});\n    };\n\n    //handle the changes of select mentor\n    handleMentorChange = (e) => {\n        let index = e.nativeEvent.target.selectedIndex;\n        let label = e.nativeEvent.target[index].text;\n        let value = e.target.value;\n\n        this.setState({\n            mentorId:value, mentorName:label});\n    };\n\n    //what to print out\n    render() {\n        let { courseId, coursename,mentorId, mentorName, mentorEmail, mentorDate} = this.state\n        \n        return (\n            <div>\n                <h1>Mentee Application</h1>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{ courseId,coursename,mentorId, mentorName, mentorEmail, mentorDate}}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name=\"courseId\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"courseName\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"mentorDate\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <fieldset className=\"form-group\">\n                                        <label>Course</label>\n                                        <select\n                                            className=\"form-control\"\n                                            onChange={this.handleCourseChange.bind(this)}\n                                            onBlur={this.onBlurCourse.bind(this)}\n                                            value={this.state.courseId}\n                                            name=\"courseId\"\n                                        >\n                                            <option value=''>Select a course</option>\n                                            {\n                                                this.state.courses.map(\n                                                    course =>\n                                                        <option key={course.id} value={course.courseId}>{course.coursename}</option>\n                                                )\n                                            }\n                                        </select>\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Mentor</label>\n                                        <select\n                                            className=\"form-control\"\n                                            onChange={this.handleMentorChange.bind(this)}\n                                            value={this.state.mentor}\n                                            name=\"mentor\"\n                                        >\n                                            <option value=''>Select a mentor</option>\n                                            {\n                                                this.state.mentors.map(\n                                                    mentor =>\n                                                        <option key={mentor.id} value={mentor.id}>{mentor.username}</option>\n                                                )\n                                            }\n                                        </select>\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Mentoring Date</label>\n                                        <Field className=\"form-control\" type=\"date\" name=\"mentorDate\" />\n                                    </fieldset>\n                                    <button className=\"btn btn-success\" type=\"submit\">Apply</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MenteeComponent","import React, { Component } from 'react'\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport GroupService from '../../api/todo/GroupService.js'\nimport CourseDataService from '../../api/todo/CourseDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass JoinGroupComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            courses: [],\n            groups: [],\n            id: this.props.match.params.id,\n            groupName:'',\n            courseId: '',\n            courseName: '',\n            numberOfMember:''\n        }\n\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n\n    }\n\n    componentDidMount() {\n        let username = AuthenticationService.getLoggedInUserName()\n        CourseDataService.retrieveAllCourses(username) \n        .then(response => this.setState({courses: response.data})\n        )\n\n        if(this.state.courseId!=\"\")\n        {\n            GroupService.getActiveGroups(this.state.courseId)\n            .then(response => this.setState({groups:response.data})\n                )   \n        }\n    }\n\n    validate(values) {\n        let errors = {} \n        if (!values.groupName) {\n            errors.groupName = 'Select a Group'\n        }\n        if (!values.courseId) {\n            errors.courseId = 'Select a Course '\n        }\n\n        return errors\n\n    }\n    \n    onBlurCourse() {\n        let username = AuthenticationService.getLoggedInUserName()\n        \n        // MenteeDataService.checkMentee(username, this.state.courseId)\n        // .then(response => this.setState({isMentee: response.data})\n        //     )\n\n        this.componentDidMount();\n    }\n\n    onSubmit(values) {\n        let username = AuthenticationService.getLoggedInUserName()\n\n        let group = {\n            id: this.state.id,\n            groupName: values.groupName,\n            courseId: values.courseId,\n            courseName: values.courseName,\n            numberOfMember: this.state.numberOfMember\n        }\n        \n        GroupService.createGroup(username, group)\n            .then(() => this.props.history.push('/groups'))\n    }\n\n    handleCourseChange = (e) => {\n        let index = e.nativeEvent.target.selectedIndex;\n        let label = e.nativeEvent.target[index].text;\n        let value = e.target.value;\n\n        this.setState({\n            courseId:value, courseName:label});\n    };\n\n    handleGroupChange = (e) => {\n        let index = e.nativeEvent.target.selectedIndex;\n        let label = e.nativeEvent.target[index].text;\n        let value = e.target.value;\n\n        this.setState({numberOfMember:parseInt(value, 10)+1, groupName:label});\n    };\n    \n    render() {\n\n        let {  groupName,courseId,courseName,numberOfMember} = this.state\n        \n        return (\n            <div>\n                <h1>Study Group Application</h1>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{ groupName,courseId,courseName,numberOfMember}}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name=\"groupName\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"courseId\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <fieldset className=\"form-group\">\n                                        <label>Course</label>\n                                        <select\n                                            className=\"form-control\"\n                                            onChange={this.handleCourseChange.bind(this)}\n                                            onBlur={this.onBlurCourse.bind(this)}\n                                            value={this.state.courseId}\n                                            name=\"courseId\"\n                                        >\n                                            <option value=''>Select a course</option>\n                                            {\n                                                this.state.courses.map(\n                                                    course =>\n                                                        <option key={course.id} value={course.courseId}>{course.coursename}</option>\n                                                )\n                                            }\n                                        </select>\n                                    </fieldset>\n                                     <fieldset className=\"form-group\">\n                                        <label>Group</label>\n                                        <select\n                                            className=\"form-control\"\n                                            // create new methods for onchange n onblur\n                                            onChange={this.handleGroupChange.bind(this)}\n                                            value={this.state.group}\n                                            name=\"mentor\"\n                                        >\n                                            <option value=''>Select a group</option>\n                                            {\n                                                this.state.groups.map(\n                                                    group =>\n                                                        <option key={group.id} value={group.numberOfMember}>{group.groupName}</option>\n                                                )\n                                            }\n                                        </select>\n                                    </fieldset>\n                                    <button className=\"btn btn-success\" type=\"submit\">Join</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default JoinGroupComponent","import React, { Component } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport GroupService from '../../api/todo/GroupService.js'\nimport CourseDataService from '../../api/todo/CourseDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass CreateGroupComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            courses: [],\n            id: this.props.match.params.id,\n            groupName:'',\n            courseId: '',\n            courseName: '',\n            numberOfMember:''\n        }\n\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n\n    }\n\n    componentDidMount() {\n        let username = AuthenticationService.getLoggedInUserName()\n        CourseDataService.retrieveAllCourses(username) \n        .then(response => this.setState({courses: response.data})\n        )\n    }\n\n    validate(values) {\n        let errors = {}\n        if (!values.groupName) {\n            errors.groupName = 'Select a Group'\n        }\n        if (!values.courseId) {\n            errors.courseId = 'Select a Course '\n        }\n\n        return errors\n    }\n\n    handleCourseChange = (e) => {\n        let index = e.nativeEvent.target.selectedIndex;\n        let label = e.nativeEvent.target[index].text;\n        let value = e.target.value;\n\n        this.setState({\n            courseId:value, courseName:label});\n    };\n\n    onSubmit(values) {\n        let username = AuthenticationService.getLoggedInUserName()\n\n        let group = {\n            id: this.state.id,\n            groupName: values.groupName,\n            courseId: values.courseId,\n            courseName: values.courseName,\n            numberOfMember: 1\n        }\n\n        GroupService.createGroup(username, group)\n            .then(() => this.props.history.push('/groups'))\n    }\n\n    render() {\n\n        let { groupName, courseId, courseName } = this.state\n        //let targetDate = this.state.targetDate\n\n        return (\n            <div>\n                <h1>Create Study Group</h1>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{ groupName, courseId, courseName }}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name=\"groupName\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"courseName\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"courseId\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <fieldset className=\"form-group\">\n                                        <label>Course</label>\n                                        <select\n                                            className=\"form-control\"\n                                            onChange={this.handleCourseChange.bind(this)}\n                                            value={this.state.courseId}\n                                            name=\"courseId\"\n                                        >\n                                            <option value=''>Select a course</option>\n                                            {\n                                                this.state.courses.map(\n                                                    course =>\n                                                        <option key={course.id} value={course.courseId}>{course.coursename}</option>\n                                                )\n                                            }\n                                        </select>\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Group Name</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"groupName\" />\n                                    </fieldset>\n                                    <button className=\"btn btn-success\" type=\"submit\">Create</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CreateGroupComponent","import React, { Component } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport CourseDataService from '../../api/todo/CourseDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass CourseUpdateComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: this.props.match.params.id,\n            courseId: '',\n            coursename: '',\n            completed: '',\n            grade: ''\n        }\n\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n\n    }\n\n    componentDidMount() {\n        //get the value of updated course and set it\n        let username = AuthenticationService.getLoggedInUserName()\n        CourseDataService.retrieveCourse(username, this.state.id)\n            .then(response => this.setState({\n                courseId: response.data.courseId,\n                coursename: response.data.coursename,\n                grade: response.data.grade\n            }))\n    }\n\n    //validate the values\n    validate(values) {\n        let errors = {}\n        if (!values.courseId) {\n            errors.courseId = 'Enter a course ID'\n        } \n\n        if (!values.coursename) {\n            errors.coursename = 'Enter a course name'\n        }\n\n        if(values.completed!='false' && values.completed!='true'){\n            errors.completed = 'Please select a status for is completed'\n        }\n\n        if(values.completed=='false' && values.grade>0){\n            errors.grade = 'Please change is completed status to true'\n        }\n\n        return errors\n    }\n\n    //get value of radio button\n    getRadioVal(form, name) {\n        var val;\n        // get list of radio buttons with specified name\n        var radios = form.elements[name];\n        \n        // loop through list of radio buttons\n        for (var i=0, len=radios.length; i<len; i++) {\n            if ( radios[i].checked ) { // radio checked?\n                val = radios[i].value; // if it is, hold its value in val\n                break; // and break out of for loop\n            }\n        }\n        return val; // return value of checked radio or undefined if none checked\n    }\n\n    //what happen when submitted\n    onSubmit(values) {\n        var val = this.getRadioVal(document.getElementById('updatecourse'), 'completed')\n        let username = AuthenticationService.getLoggedInUserName()\n        let course = {\n            id: this.state.id,\n            courseId: values.courseId,\n            coursename: values.coursename,\n            completed: val,\n            grade: values.grade\n        }\n\n        CourseDataService.updateCourse(username, this.state.id, course)\n            .then(() => this.props.history.push('/courses'))\n    }\n\n    //what to print out\n    render() {\n\n        let { courseId, coursename, completed, grade} = this.state\n\n        return (\n            <div>\n                <h1>Add Course</h1>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{ courseId, coursename, completed, grade}}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form class='updatecourse' id='updatecourse'>\n                                    <ErrorMessage name=\"courseId\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"coursename\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"completed\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"grade\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <fieldset className=\"form-group\">\n                                        <label>Course ID</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"courseId\" />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Course Name</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"coursename\" />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Is Completed</label><br/>\n                                        <Field type=\"radio\" name=\"completed\" value=\"true\"/> True <br/> \n                                        <Field type=\"radio\" name=\"completed\" value=\"false\"/> False\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Grade</label>\n                                        <Field className=\"form-control\" type=\"number\" name=\"grade\" min=\"0\" max=\"100\"/>\n                                    </fieldset>\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CourseUpdateComponent","import React, { Component } from 'react'\nimport moment from 'moment'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport MenteeDataService from '../../api/todo/MenteeDataService.js'\nimport CourseDataService from '../../api/todo/CourseDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass MenteeUpdateComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            courses: [],\n            id: this.props.match.params.id,\n            courseId: '',\n            courseName: '',\n            mentorDate: moment(new Date()).format('YYYY-MM-DD'),\n            isCompleted: '',\n            mentorID:'',\n            mentorEmail:'',\n            mentorName:''\n        }\n\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n    }\n\n    componentDidMount() {\n        let username = AuthenticationService.getLoggedInUserName()\n\n        //get list of courses\n        CourseDataService.retrieveAllCourses(username) \n            .then(response => this.setState({courses: response.data})\n            )\n\n        //get and set mentee's detail\n        MenteeDataService.retrieveMentee(username, this.state.id)\n            .then(response => this.setState({\n                courseId: response.data.courseId,\n                courseName: response.data.courseName,\n                mentorDate: moment(response.data.mentorDate).format('YYYY-MM-DD'),\n                mentorID: response.data.mentorID,\n                mentorEmail: response.data.mentorEmail,\n                mentorName: response.data.mentorName\n            }))\n    }\n\n    //validate the inputs\n    validate(values) {\n        let errors = {}\n        if (!values.courseId) {\n            errors.courseId = 'Select a Course ID'\n        }\n        if (!moment(values.mentorDate).isValid()) {\n            errors.mentorDate = 'Enter a valid Mentoring Date'\n        }\n\n        if(values.isCompleted!='false' && values.isCompleted!='true'){\n            errors.isCompleted = 'Please select a status for is completed'\n        }\n\n        return errors\n    }\n\n    //get value of radio button\n    getRadioVal(form, name) {\n        var val;\n        // get list of radio buttons with specified name\n        var radios = form.elements[name];\n        \n        // loop through list of radio buttons\n        for (var i=0, len=radios.length; i<len; i++) {\n            if ( radios[i].checked ) { // radio checked?\n                val = radios[i].value; // if it is, hold its value in val\n                break; // and break out of for loop\n            }\n        }\n        return val; // return value of checked radio or undefined if none checked\n    }\n\n    //handle changes for select course\n    handleChange = (e) => {\n        let index = e.nativeEvent.target.selectedIndex;\n        let label = e.nativeEvent.target[index].text;\n        let value = e.target.value;\n\n        this.setState({\n            courseId:value, courseName:label});\n    };\n\n    //what happen when submitted\n    onSubmit(values) {\n        var val = this.getRadioVal(document.getElementById('updatementee'), 'isCompleted')\n        let username = AuthenticationService.getLoggedInUserName()\n        let mentee = {\n            id: this.state.id,\n            courseId: values.courseId,\n            courseName: values.courseName,\n            mentorDate: values.mentorDate,\n            isCompleted: val,\n            mentorID:this.state.mentorID,\n            mentorEmail: this.state.mentorEmail,\n            mentorName: this.state.mentorName\n        }\n\n        MenteeDataService.updateMentee(username, this.state.id, mentee)\n            .then(() => this.props.history.push('/mentees'))\n    }\n\n    render() {\n        let { courseId, courseName,mentorDate, isCompleted} = this.state\n        \n        return (\n            <div>\n                <h1>Mentee Application</h1>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{ courseId,courseName,mentorDate, isCompleted}}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form class='updatementee' id='updatementee'>\n                                    <ErrorMessage name=\"courseId\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"courseName\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"mentorDate\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"isCompleted\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <fieldset className=\"form-group\">\n                                        <label>Course</label>\n                                        <select\n                                            className=\"form-control\"\n                                            onChange={this.handleChange.bind(this)}\n                                            value={this.state.courseId}\n                                            name=\"courseId\"\n                                        >\n                                            <option value=''>Select a course</option>\n                                            {\n                                                this.state.courses.map(\n                                                    course =>\n                                                        <option key={course.id} value={course.courseId}>{course.coursename}</option>\n                                                )\n                                            }\n                                        </select>\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Mentoring Date</label>\n                                        <Field className=\"form-control\" type=\"date\" name=\"mentorDate\" />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Is Completed</label><br/>\n                                        <Field type=\"radio\" name=\"isCompleted\" value=\"true\"/> True <br/> \n                                        <Field type=\"radio\" name=\"isCompleted\" value=\"false\"/> False\n                                    </fieldset>\n                                    <button className=\"btn btn-success\" type=\"submit\">Apply</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MenteeUpdateComponent","import React, {Component} from 'react'\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport AuthenticatedRoute from './AuthenticatedRoute.jsx'\nimport LoginComponent from './LoginComponent.jsx'\nimport ListCoursesComponent from './ListCoursesComponent.jsx'\nimport ListMentorsComponent from './ListMentorsComponent.jsx'\nimport ListMenteesComponent from './ListMenteesComponent.jsx'\nimport ListGroupsComponent from './ListGroupsComponent.jsx'\nimport ErrorComponent from './ErrorComponent.jsx'\nimport HeaderComponent from './HeaderComponent.jsx'\nimport FooterComponent from './FooterComponent.jsx'\nimport LogoutComponent from './LogoutComponent.jsx'\nimport WelcomeComponent from './WelcomeComponent.jsx'\nimport CourseComponent from './CourseComponent.jsx'\nimport MentorComponent from './MentorComponent.jsx'\nimport MenteeComponent from './MenteeComponent.jsx'\nimport JoinGroupComponent from './JoinGroupComponent.jsx'\nimport CreateGroupComponent from './CreateGroupComponent.jsx'\nimport CourseUpdateComponent from './CourseUpdateComponent.jsx'\nimport MenteeUpdateComponent from './MenteeUpdateComponent.jsx'\n\nclass TodoApp extends Component {\n    render() {\n        return (\n            <div className=\"TodoApp\">\n                <Router>\n                    <>\n                        <HeaderComponent/>\n                        <Switch>\n                            <Route path=\"/\" exact component={LoginComponent}/>\n                            <Route path=\"/login\" component={LoginComponent}/>\n                            <AuthenticatedRoute path=\"/welcome/:name\" component={WelcomeComponent}/>\n                            <AuthenticatedRoute path=\"/courses/:id\" component={CourseComponent}/>\n                            <AuthenticatedRoute path=\"/courses\" component={ListCoursesComponent}/>\n                            <AuthenticatedRoute path=\"/update/courses/:id\" component={CourseUpdateComponent}/>\n                            <AuthenticatedRoute path=\"/mentors/:id\" component={MentorComponent}/>\n                            <AuthenticatedRoute path=\"/mentors\" component={ListMentorsComponent}/>\n                            <AuthenticatedRoute path=\"/mentees/:id\" component={MenteeComponent}/>\n                            <AuthenticatedRoute path=\"/mentees\" component={ListMenteesComponent}/>\n                            <AuthenticatedRoute path=\"/update/mentees/:id\" component={MenteeUpdateComponent}/>\n                            <AuthenticatedRoute path=\"/joingroups/:id\" component={JoinGroupComponent}/>\n                            <AuthenticatedRoute path=\"/groups\" component={ListGroupsComponent}/>\n                            <AuthenticatedRoute path=\"/creategroups/-1\" component={CreateGroupComponent}/>\n                            <AuthenticatedRoute path=\"/logout\" component={LogoutComponent}/>\n                            <Route component={ErrorComponent}/>\n                        </Switch>\n                        <FooterComponent/>\n                    </>\n                </Router>\n                {/*<LoginComponent/>\n                <WelcomeComponent/>*/}\n            </div>\n        )\n    }\n}\n\nexport default TodoApp","import React, { Component } from 'react';\n//import FirstComponent from './components/learning-examples/FirstComponent'\n//import SecondComponent from './components/learning-examples/SecondComponent'\n//import ThirdComponent from './components/learning-examples/ThirdComponent'\n//import Counter from './components/counter/Counter'\nimport TodoApp from './components/todo/TodoApp'\nimport './App.css';\nimport './bootstrap.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/*<Counter/>*/}\n        <TodoApp />\n      </div>\n    );\n  }\n}\n\n// class LearningComponents extends Component {\n//   render() {\n//     return (\n//       <div className=\"LearningComponents\">\n//          My Hello World\n//          <FirstComponent></FirstComponent>\n//          <SecondComponent></SecondComponent>\n//          <ThirdComponent></ThirdComponent>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}